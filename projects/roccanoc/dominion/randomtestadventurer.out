TEST RESULTS FOR randomtestadventurer.c:
Running tests for Adventurer card.

Test hand count for player A
Expected: 163	Actual: 164
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 220	Actual <= 215
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 17	Actual: 17
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 365892012	Actual: 365892012
TEST PASSED

Testing duchy
Expected: -1482261120	Actual: -1482261120
TEST PASSED

Testing estate
Expected: -1482261120	Actual: -1482261120
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: -1716903204	Actual: -1716903204
TEST PASSED

Testing pile# 1
Expected: 589027582	Actual: 589027582
TEST PASSED

Testing pile# 2
Expected: -1482261120	Actual: -1482261120
TEST PASSED

Testing pile# 3
Expected: 365892012	Actual: 365892012
TEST PASSED

Testing pile# 4
Expected: 59252565	Actual: 59252565
TEST PASSED

Testing pile# 5
Expected: -489738968	Actual: -489738968
TEST PASSED

Testing pile# 6
Expected: 1109606448	Actual: 1109606448
TEST PASSED

Testing pile# 7
Expected: 1342751650	Actual: 1342751650
TEST PASSED

Testing pile# 8
Expected: 1261923783	Actual: 1261923783
TEST PASSED

Testing pile# 9
Expected: 2099315854	Actual: 2099315854
TEST PASSED

Testing pile# 10
Expected: -2134125551	Actual: -2134125551
TEST PASSED

Testing pile# 11
Expected: -645747689	Actual: -645747689
TEST PASSED

Testing pile# 12
Expected: 723968241	Actual: 723968241
TEST PASSED

Testing pile# 13
Expected: 1319010745	Actual: 1319010745
TEST PASSED

Testing pile# 14
Expected: 1198591128	Actual: 1198591128
TEST PASSED

Testing pile# 15
Expected: -1220843831	Actual: -1220843831
TEST PASSED

Testing pile# 16
Expected: 1310238295	Actual: 1310238295
TEST PASSED

Testing pile# 17
Expected: 1599242154	Actual: 1599242154
TEST PASSED

Testing pile# 18
Expected: 150035655	Actual: 150035655
TEST PASSED

Testing pile# 19
Expected: 1846958933	Actual: 1846958933
TEST PASSED

Testing pile# 20
Expected: -1006363730	Actual: -1006363730
TEST PASSED

Testing pile# 21
Expected: 1333526405	Actual: 1333526405
TEST PASSED

Testing pile# 22
Expected: 1089823581	Actual: 1089823581
TEST PASSED

Testing pile# 23
Expected: 2070022651	Actual: 2070022651
TEST PASSED

Testing pile# 24
Expected: -1576276347	Actual: -1576276347
TEST PASSED

Testing pile# 25
Expected: 1425438547	Actual: 1425438547
TEST PASSED

Testing pile# 26
Expected: 638184441	Actual: 638184441
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: -1310336370	Actual: -1310336370
TEST PASSED

Testing other player's deck count(s)
Expected: 2084594981	Actual: 2084594981
TEST PASSED

Testing other player's discard count(s)
Expected: 1967812036	Actual: 1967812036
TEST PASSED

Skipping tested player
Testing player #2
Testing other player's hand count(s)
Expected: -810019084	Actual: -810019084
TEST PASSED

Testing other player's deck count(s)
Expected: 2019297267	Actual: 2019297267
TEST PASSED

Testing other player's discard count(s)
Expected: -2146974968	Actual: -2146974968
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 10	Actual: 11
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 469	Actual <= 467
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 2	Actual: 2
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 1261067954	Actual: 1261067954
TEST PASSED

Testing duchy
Expected: -2072705653	Actual: -2072705653
TEST PASSED

Testing estate
Expected: -2072705653	Actual: -2072705653
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 1204683397	Actual: 1204683397
TEST PASSED

Testing pile# 1
Expected: 722336937	Actual: 722336937
TEST PASSED

Testing pile# 2
Expected: -2072705653	Actual: -2072705653
TEST PASSED

Testing pile# 3
Expected: 1261067954	Actual: 1261067954
TEST PASSED

Testing pile# 4
Expected: 604733616	Actual: 604733616
TEST PASSED

Testing pile# 5
Expected: -1027271976	Actual: -1027271976
TEST PASSED

Testing pile# 6
Expected: -560069515	Actual: -560069515
TEST PASSED

Testing pile# 7
Expected: 742285430	Actual: 742285430
TEST PASSED

Testing pile# 8
Expected: -1595673585	Actual: -1595673585
TEST PASSED

Testing pile# 9
Expected: 1071774824	Actual: 1071774824
TEST PASSED

Testing pile# 10
Expected: -1223142851	Actual: -1223142851
TEST PASSED

Testing pile# 11
Expected: 149451624	Actual: 149451624
TEST PASSED

Testing pile# 12
Expected: -1089487946	Actual: -1089487946
TEST PASSED

Testing pile# 13
Expected: 44696473	Actual: 44696473
TEST PASSED

Testing pile# 14
Expected: -639518319	Actual: -639518319
TEST PASSED

Testing pile# 15
Expected: -1823859647	Actual: -1823859647
TEST PASSED

Testing pile# 16
Expected: 1864382261	Actual: 1864382261
TEST PASSED

Testing pile# 17
Expected: -1838454367	Actual: -1838454367
TEST PASSED

Testing pile# 18
Expected: 1054038339	Actual: 1054038339
TEST PASSED

Testing pile# 19
Expected: 1824207406	Actual: 1824207406
TEST PASSED

Testing pile# 20
Expected: -2055308670	Actual: -2055308670
TEST PASSED

Testing pile# 21
Expected: -2026552698	Actual: -2026552698
TEST PASSED

Testing pile# 22
Expected: -552262401	Actual: -552262401
TEST PASSED

Testing pile# 23
Expected: -763557825	Actual: -763557825
TEST PASSED

Testing pile# 24
Expected: 1456600717	Actual: 1456600717
TEST PASSED

Testing pile# 25
Expected: 1417612069	Actual: 1417612069
TEST PASSED

Testing pile# 26
Expected: -525928244	Actual: -525928244
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: -873590795	Actual: -873590795
TEST PASSED

Testing other player's deck count(s)
Expected: 967765936	Actual: 967765936
TEST PASSED

Testing other player's discard count(s)
Expected: -1122493506	Actual: -1122493506
TEST PASSED
Testing player #1
Testing other player's hand count(s)
Expected: -2138414884	Actual: -2138414884
TEST PASSED

Testing other player's deck count(s)
Expected: -453282823	Actual: -453282823
TEST PASSED

Testing other player's discard count(s)
Expected: 1878649607	Actual: 1878649607
TEST PASSED

Skipping tested player

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 27	Actual: 28
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 440	Actual <= 426
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 5	Actual: 5
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 1087970033	Actual: 1087970033
TEST PASSED

Testing duchy
Expected: -1499278449	Actual: -1499278449
TEST PASSED

Testing estate
Expected: -1499278449	Actual: -1499278449
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 1327797365	Actual: 1327797365
TEST PASSED

Testing pile# 1
Expected: 610086787	Actual: 610086787
TEST PASSED

Testing pile# 2
Expected: -1499278449	Actual: -1499278449
TEST PASSED

Testing pile# 3
Expected: 1087970033	Actual: 1087970033
TEST PASSED

Testing pile# 4
Expected: 1339631924	Actual: 1339631924
TEST PASSED

Testing pile# 5
Expected: 1563165002	Actual: 1563165002
TEST PASSED

Testing pile# 6
Expected: -654220548	Actual: -654220548
TEST PASSED

Testing pile# 7
Expected: -1917494797	Actual: -1917494797
TEST PASSED

Testing pile# 8
Expected: 77832676	Actual: 77832676
TEST PASSED

Testing pile# 9
Expected: 810009302	Actual: 810009302
TEST PASSED

Testing pile# 10
Expected: -1942534745	Actual: -1942534745
TEST PASSED

Testing pile# 11
Expected: 1941418819	Actual: 1941418819
TEST PASSED

Testing pile# 12
Expected: -714742130	Actual: -714742130
TEST PASSED

Testing pile# 13
Expected: 402301738	Actual: 402301738
TEST PASSED

Testing pile# 14
Expected: 879531866	Actual: 879531866
TEST PASSED

Testing pile# 15
Expected: -1163100413	Actual: -1163100413
TEST PASSED

Testing pile# 16
Expected: -631312367	Actual: -631312367
TEST PASSED

Testing pile# 17
Expected: -280787725	Actual: -280787725
TEST PASSED

Testing pile# 18
Expected: 2144311859	Actual: 2144311859
TEST PASSED

Testing pile# 19
Expected: 768938788	Actual: 768938788
TEST PASSED

Testing pile# 20
Expected: -563837556	Actual: -563837556
TEST PASSED

Testing pile# 21
Expected: 2087274227	Actual: 2087274227
TEST PASSED

Testing pile# 22
Expected: -1187975641	Actual: -1187975641
TEST PASSED

Testing pile# 23
Expected: -1080252281	Actual: -1080252281
TEST PASSED

Testing pile# 24
Expected: -827600914	Actual: -827600914
TEST PASSED

Testing pile# 25
Expected: 791520011	Actual: 791520011
TEST PASSED

Testing pile# 26
Expected: -1754601641	Actual: -1754601641
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: 511701530	Actual: 511701530
TEST PASSED

Testing other player's deck count(s)
Expected: -299259234	Actual: -299259234
TEST PASSED

Testing other player's discard count(s)
Expected: -1009222198	Actual: -1009222198
TEST PASSED

Skipping tested player
Testing player #2
Testing other player's hand count(s)
Expected: 849768196	Actual: 849768196
TEST PASSED

Testing other player's deck count(s)
Expected: -2085290911	Actual: -2085290911
TEST PASSED

Testing other player's discard count(s)
Expected: 1317850610	Actual: 1317850610
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 148	Actual: 149
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 34	Actual <= 31
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 23	Actual: 23
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: -1405729026	Actual: -1405729026
TEST PASSED

Testing duchy
Expected: 407454692	Actual: 407454692
TEST PASSED

Testing estate
Expected: 407454692	Actual: 407454692
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: -1927836653	Actual: -1927836653
TEST PASSED

Testing pile# 1
Expected: -321571041	Actual: -321571041
TEST PASSED

Testing pile# 2
Expected: 407454692	Actual: 407454692
TEST PASSED

Testing pile# 3
Expected: -1405729026	Actual: -1405729026
TEST PASSED

Testing pile# 4
Expected: 2079154452	Actual: 2079154452
TEST PASSED

Testing pile# 5
Expected: 1135865486	Actual: 1135865486
TEST PASSED

Testing pile# 6
Expected: 1451494510	Actual: 1451494510
TEST PASSED

Testing pile# 7
Expected: -1569425730	Actual: -1569425730
TEST PASSED

Testing pile# 8
Expected: -1629097610	Actual: -1629097610
TEST PASSED

Testing pile# 9
Expected: -268214669	Actual: -268214669
TEST PASSED

Testing pile# 10
Expected: -928047241	Actual: -928047241
TEST PASSED

Testing pile# 11
Expected: 1276955340	Actual: 1276955340
TEST PASSED

Testing pile# 12
Expected: -156396994	Actual: -156396994
TEST PASSED

Testing pile# 13
Expected: 884177824	Actual: 884177824
TEST PASSED

Testing pile# 14
Expected: 1035365437	Actual: 1035365437
TEST PASSED

Testing pile# 15
Expected: -543786500	Actual: -543786500
TEST PASSED

Testing pile# 16
Expected: -1167296412	Actual: -1167296412
TEST PASSED

Testing pile# 17
Expected: 1234414777	Actual: 1234414777
TEST PASSED

Testing pile# 18
Expected: 906389447	Actual: 906389447
TEST PASSED

Testing pile# 19
Expected: 505797427	Actual: 505797427
TEST PASSED

Testing pile# 20
Expected: 1182566683	Actual: 1182566683
TEST PASSED

Testing pile# 21
Expected: -178105922	Actual: -178105922
TEST PASSED

Testing pile# 22
Expected: 1808441861	Actual: 1808441861
TEST PASSED

Testing pile# 23
Expected: 496512789	Actual: 496512789
TEST PASSED

Testing pile# 24
Expected: 1643274959	Actual: 1643274959
TEST PASSED

Testing pile# 25
Expected: -1631918366	Actual: -1631918366
TEST PASSED

Testing pile# 26
Expected: 523961424	Actual: 523961424
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: 1029828709	Actual: 1029828709
TEST PASSED

Testing other player's deck count(s)
Expected: 1957125638	Actual: 1957125638
TEST PASSED

Testing other player's discard count(s)
Expected: 1691711569	Actual: 1691711569
TEST PASSED

Skipping tested player
Testing player #2
Testing other player's hand count(s)
Expected: 1875971474	Actual: 1875971474
TEST PASSED

Testing other player's deck count(s)
Expected: -1605689839	Actual: -1605689839
TEST PASSED

Testing other player's discard count(s)
Expected: 1082417332	Actual: 1082417332
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 15	Actual: 16
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 40	Actual <= 36
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 4	Actual: 4
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 5307198	Actual: 5307198
TEST PASSED

Testing duchy
Expected: -1413562265	Actual: -1413562265
TEST PASSED

Testing estate
Expected: -1413562265	Actual: -1413562265
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 817370690	Actual: 817370690
TEST PASSED

Testing pile# 1
Expected: 1912175447	Actual: 1912175447
TEST PASSED

Testing pile# 2
Expected: -1413562265	Actual: -1413562265
TEST PASSED

Testing pile# 3
Expected: 5307198	Actual: 5307198
TEST PASSED

Testing pile# 4
Expected: 828460379	Actual: 828460379
TEST PASSED

Testing pile# 5
Expected: -935268975	Actual: -935268975
TEST PASSED

Testing pile# 6
Expected: -391524903	Actual: -391524903
TEST PASSED

Testing pile# 7
Expected: 1533663483	Actual: 1533663483
TEST PASSED

Testing pile# 8
Expected: -1132994260	Actual: -1132994260
TEST PASSED

Testing pile# 9
Expected: 1333734030	Actual: 1333734030
TEST PASSED

Testing pile# 10
Expected: -972772698	Actual: -972772698
TEST PASSED

Testing pile# 11
Expected: 1919579186	Actual: 1919579186
TEST PASSED

Testing pile# 12
Expected: 486377970	Actual: 486377970
TEST PASSED

Testing pile# 13
Expected: 1180508570	Actual: 1180508570
TEST PASSED

Testing pile# 14
Expected: -1597938623	Actual: -1597938623
TEST PASSED

Testing pile# 15
Expected: 1518005609	Actual: 1518005609
TEST PASSED

Testing pile# 16
Expected: -748339291	Actual: -748339291
TEST PASSED

Testing pile# 17
Expected: 441454359	Actual: 441454359
TEST PASSED

Testing pile# 18
Expected: 1676753162	Actual: 1676753162
TEST PASSED

Testing pile# 19
Expected: 264532622	Actual: 264532622
TEST PASSED

Testing pile# 20
Expected: -215987196	Actual: -215987196
TEST PASSED

Testing pile# 21
Expected: 1449547522	Actual: 1449547522
TEST PASSED

Testing pile# 22
Expected: 334146163	Actual: 334146163
TEST PASSED

Testing pile# 23
Expected: 5390199	Actual: 5390199
TEST PASSED

Testing pile# 24
Expected: -1468106348	Actual: -1468106348
TEST PASSED

Testing pile# 25
Expected: 96883100	Actual: 96883100
TEST PASSED

Testing pile# 26
Expected: 2065180581	Actual: 2065180581
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: -2107050712	Actual: -2107050712
TEST PASSED

Testing other player's deck count(s)
Expected: 735446036	Actual: 735446036
TEST PASSED

Testing other player's discard count(s)
Expected: 40842925	Actual: 40842925
TEST PASSED

Skipping tested player
Testing player #2
Testing other player's hand count(s)
Expected: -70051459	Actual: -70051459
TEST PASSED

Testing other player's deck count(s)
Expected: -1489330764	Actual: -1489330764
TEST PASSED

Testing other player's discard count(s)
Expected: 1037444130	Actual: 1037444130
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 50	Actual: 51
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 182	Actual <= 169
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 7	Actual: 7
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 1176432193	Actual: 1176432193
TEST PASSED

Testing duchy
Expected: -847512417	Actual: -847512417
TEST PASSED

Testing estate
Expected: -847512417	Actual: -847512417
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 945211064	Actual: 945211064
TEST PASSED

Testing pile# 1
Expected: -111545081	Actual: -111545081
TEST PASSED

Testing pile# 2
Expected: -847512417	Actual: -847512417
TEST PASSED

Testing pile# 3
Expected: 1176432193	Actual: 1176432193
TEST PASSED

Testing pile# 4
Expected: 776181083	Actual: 776181083
TEST PASSED

Testing pile# 5
Expected: 1744670007	Actual: 1744670007
TEST PASSED

Testing pile# 6
Expected: 1076213938	Actual: 1076213938
TEST PASSED

Testing pile# 7
Expected: 1642805382	Actual: 1642805382
TEST PASSED

Testing pile# 8
Expected: 1606313922	Actual: 1606313922
TEST PASSED

Testing pile# 9
Expected: -1344673110	Actual: -1344673110
TEST PASSED

Testing pile# 10
Expected: -175041713	Actual: -175041713
TEST PASSED

Testing pile# 11
Expected: 14850313	Actual: 14850313
TEST PASSED

Testing pile# 12
Expected: 2094251119	Actual: 2094251119
TEST PASSED

Testing pile# 13
Expected: 1415369880	Actual: 1415369880
TEST PASSED

Testing pile# 14
Expected: 554450483	Actual: 554450483
TEST PASSED

Testing pile# 15
Expected: -1750393977	Actual: -1750393977
TEST PASSED

Testing pile# 16
Expected: -759430779	Actual: -759430779
TEST PASSED

Testing pile# 17
Expected: 1828284158	Actual: 1828284158
TEST PASSED

Testing pile# 18
Expected: 1825193854	Actual: 1825193854
TEST PASSED

Testing pile# 19
Expected: -1102701668	Actual: -1102701668
TEST PASSED

Testing pile# 20
Expected: 1504718581	Actual: 1504718581
TEST PASSED

Testing pile# 21
Expected: 1715220709	Actual: 1715220709
TEST PASSED

Testing pile# 22
Expected: -181579439	Actual: -181579439
TEST PASSED

Testing pile# 23
Expected: 412243912	Actual: 412243912
TEST PASSED

Testing pile# 24
Expected: 2100478175	Actual: 2100478175
TEST PASSED

Testing pile# 25
Expected: 789925509	Actual: 789925509
TEST PASSED

Testing pile# 26
Expected: -2118438492	Actual: -2118438492
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: 507949034	Actual: 507949034
TEST PASSED

Testing other player's deck count(s)
Expected: -1395724073	Actual: -1395724073
TEST PASSED

Testing other player's discard count(s)
Expected: -1855849207	Actual: -1855849207
TEST PASSED

Skipping tested player
Testing player #2
Testing other player's hand count(s)
Expected: 1078706320	Actual: 1078706320
TEST PASSED

Testing other player's deck count(s)
Expected: 528326040	Actual: 528326040
TEST PASSED

Testing other player's discard count(s)
Expected: -129112148	Actual: -129112148
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 33	Actual: 34
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 20	Actual <= 12
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 8	Actual: 8
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 1177950746	Actual: 1177950746
TEST PASSED

Testing duchy
Expected: 1017459423	Actual: 1017459423
TEST PASSED

Testing estate
Expected: 1017459423	Actual: 1017459423
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: -2074969330	Actual: -2074969330
TEST PASSED

Testing pile# 1
Expected: -1877387356	Actual: -1877387356
TEST PASSED

Testing pile# 2
Expected: 1017459423	Actual: 1017459423
TEST PASSED

Testing pile# 3
Expected: 1177950746	Actual: 1177950746
TEST PASSED

Testing pile# 4
Expected: 1341890118	Actual: 1341890118
TEST PASSED

Testing pile# 5
Expected: -96952610	Actual: -96952610
TEST PASSED

Testing pile# 6
Expected: 1820216152	Actual: 1820216152
TEST PASSED

Testing pile# 7
Expected: -1724862542	Actual: -1724862542
TEST PASSED

Testing pile# 8
Expected: -1654762674	Actual: -1654762674
TEST PASSED

Testing pile# 9
Expected: -1815627484	Actual: -1815627484
TEST PASSED

Testing pile# 10
Expected: 31163882	Actual: 31163882
TEST PASSED

Testing pile# 11
Expected: -796670158	Actual: -796670158
TEST PASSED

Testing pile# 12
Expected: -444626664	Actual: -444626664
TEST PASSED

Testing pile# 13
Expected: 1995722349	Actual: 1995722349
TEST PASSED

Testing pile# 14
Expected: -1132732769	Actual: -1132732769
TEST PASSED

Testing pile# 15
Expected: -1024550731	Actual: -1024550731
TEST PASSED

Testing pile# 16
Expected: 974254641	Actual: 974254641
TEST PASSED

Testing pile# 17
Expected: 33683190	Actual: 33683190
TEST PASSED

Testing pile# 18
Expected: 399075503	Actual: 399075503
TEST PASSED

Testing pile# 19
Expected: -527489591	Actual: -527489591
TEST PASSED

Testing pile# 20
Expected: 1903141819	Actual: 1903141819
TEST PASSED

Testing pile# 21
Expected: 56542952	Actual: 56542952
TEST PASSED

Testing pile# 22
Expected: -730695154	Actual: -730695154
TEST PASSED

Testing pile# 23
Expected: 1716681069	Actual: 1716681069
TEST PASSED

Testing pile# 24
Expected: 1323846138	Actual: 1323846138
TEST PASSED

Testing pile# 25
Expected: 1108632004	Actual: 1108632004
TEST PASSED

Testing pile# 26
Expected: -1889912816	Actual: -1889912816
TEST PASSED

Testing that there was no effect on other player(s)

Skipping tested player
Testing player #1
Testing other player's hand count(s)
Expected: 1723599394	Actual: 1723599394
TEST PASSED

Testing other player's deck count(s)
Expected: 173163096	Actual: 173163096
TEST PASSED

Testing other player's discard count(s)
Expected: 1560214590	Actual: 1560214590
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 180	Actual: 181
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 61	Actual <= 58
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 18	Actual: 18
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 373236135	Actual: 373236135
TEST PASSED

Testing duchy
Expected: -149437973	Actual: -149437973
TEST PASSED

Testing estate
Expected: -149437973	Actual: -149437973
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: -1206360197	Actual: -1206360197
TEST PASSED

Testing pile# 1
Expected: -347014584	Actual: -347014584
TEST PASSED

Testing pile# 2
Expected: -149437973	Actual: -149437973
TEST PASSED

Testing pile# 3
Expected: 373236135	Actual: 373236135
TEST PASSED

Testing pile# 4
Expected: 760075739	Actual: 760075739
TEST PASSED

Testing pile# 5
Expected: -729377018	Actual: -729377018
TEST PASSED

Testing pile# 6
Expected: -980806428	Actual: -980806428
TEST PASSED

Testing pile# 7
Expected: -1961354608	Actual: -1961354608
TEST PASSED

Testing pile# 8
Expected: -1106535592	Actual: -1106535592
TEST PASSED

Testing pile# 9
Expected: -758377546	Actual: -758377546
TEST PASSED

Testing pile# 10
Expected: -1160566750	Actual: -1160566750
TEST PASSED

Testing pile# 11
Expected: -663131378	Actual: -663131378
TEST PASSED

Testing pile# 12
Expected: -417831318	Actual: -417831318
TEST PASSED

Testing pile# 13
Expected: 317445638	Actual: 317445638
TEST PASSED

Testing pile# 14
Expected: -1910672604	Actual: -1910672604
TEST PASSED

Testing pile# 15
Expected: -1904528807	Actual: -1904528807
TEST PASSED

Testing pile# 16
Expected: -1751235556	Actual: -1751235556
TEST PASSED

Testing pile# 17
Expected: -1589447452	Actual: -1589447452
TEST PASSED

Testing pile# 18
Expected: 278844532	Actual: 278844532
TEST PASSED

Testing pile# 19
Expected: 390465065	Actual: 390465065
TEST PASSED

Testing pile# 20
Expected: 1965164423	Actual: 1965164423
TEST PASSED

Testing pile# 21
Expected: -535270932	Actual: -535270932
TEST PASSED

Testing pile# 22
Expected: 785884187	Actual: 785884187
TEST PASSED

Testing pile# 23
Expected: 1945453017	Actual: 1945453017
TEST PASSED

Testing pile# 24
Expected: -1942472906	Actual: -1942472906
TEST PASSED

Testing pile# 25
Expected: 1510101253	Actual: 1510101253
TEST PASSED

Testing pile# 26
Expected: 1887259943	Actual: 1887259943
TEST PASSED

Testing that there was no effect on other player(s)
Testing player #0
Testing other player's hand count(s)
Expected: 1112732543	Actual: 1112732543
TEST PASSED

Testing other player's deck count(s)
Expected: 268954487	Actual: 268954487
TEST PASSED

Testing other player's discard count(s)
Expected: -586179123	Actual: -586179123
TEST PASSED
Testing player #1
Testing other player's hand count(s)
Expected: -592866714	Actual: -592866714
TEST PASSED

Testing other player's deck count(s)
Expected: -1444830575	Actual: -1444830575
TEST PASSED

Testing other player's discard count(s)
Expected: 1725398602	Actual: 1725398602
TEST PASSED

Skipping tested player

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 115	Actual: 116
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 294	Actual <= 284
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 17	Actual: 17
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 891429116	Actual: 891429116
TEST PASSED

Testing duchy
Expected: -249628272	Actual: -249628272
TEST PASSED

Testing estate
Expected: -249628272	Actual: -249628272
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 260479968	Actual: 260479968
TEST PASSED

Testing pile# 1
Expected: 259054616	Actual: 259054616
TEST PASSED

Testing pile# 2
Expected: -249628272	Actual: -249628272
TEST PASSED

Testing pile# 3
Expected: 891429116	Actual: 891429116
TEST PASSED

Testing pile# 4
Expected: 1104588818	Actual: 1104588818
TEST PASSED

Testing pile# 5
Expected: 828563262	Actual: 828563262
TEST PASSED

Testing pile# 6
Expected: 202681826	Actual: 202681826
TEST PASSED

Testing pile# 7
Expected: -1040873457	Actual: -1040873457
TEST PASSED

Testing pile# 8
Expected: 1384207119	Actual: 1384207119
TEST PASSED

Testing pile# 9
Expected: -1750535029	Actual: -1750535029
TEST PASSED

Testing pile# 10
Expected: -1140433336	Actual: -1140433336
TEST PASSED

Testing pile# 11
Expected: 1718016517	Actual: 1718016517
TEST PASSED

Testing pile# 12
Expected: -1365196297	Actual: -1365196297
TEST PASSED

Testing pile# 13
Expected: -989998380	Actual: -989998380
TEST PASSED

Testing pile# 14
Expected: -509672705	Actual: -509672705
TEST PASSED

Testing pile# 15
Expected: 82543952	Actual: 82543952
TEST PASSED

Testing pile# 16
Expected: -239857888	Actual: -239857888
TEST PASSED

Testing pile# 17
Expected: 946044686	Actual: 946044686
TEST PASSED

Testing pile# 18
Expected: 412051109	Actual: 412051109
TEST PASSED

Testing pile# 19
Expected: 864975179	Actual: 864975179
TEST PASSED

Testing pile# 20
Expected: -2101946836	Actual: -2101946836
TEST PASSED

Testing pile# 21
Expected: 597361043	Actual: 597361043
TEST PASSED

Testing pile# 22
Expected: 1761408723	Actual: 1761408723
TEST PASSED

Testing pile# 23
Expected: 1684768627	Actual: 1684768627
TEST PASSED

Testing pile# 24
Expected: 1182608716	Actual: 1182608716
TEST PASSED

Testing pile# 25
Expected: -1980051271	Actual: -1980051271
TEST PASSED

Testing pile# 26
Expected: -1062556372	Actual: -1062556372
TEST PASSED

Testing that there was no effect on other player(s)

Skipping tested player
Testing player #1
Testing other player's hand count(s)
Expected: 714870472	Actual: 714870472
TEST PASSED

Testing other player's deck count(s)
Expected: -1120322833	Actual: -1120322833
TEST PASSED

Testing other player's discard count(s)
Expected: 145008089	Actual: 145008089
TEST PASSED

FINAL RESULT: ALL TESTS PASSED

Test hand count for player A
Expected: 4	Actual: 5
TEST FAILED
c

Test deck count has decreased by at least 2
Expected <= 439	Actual <= 415
TEST PASSED
d

Testing that 2 treasure cards were drawn
Expected: 3	Actual: 3
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 687489778	Actual: 687489778
TEST PASSED

Testing duchy
Expected: 1874405870	Actual: 1874405870
TEST PASSED

Testing estate
Expected: 1874405870	Actual: 1874405870
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: -1296317804	Actual: -1296317804
TEST PASSED

Testing pile# 1
Expected: 1162017785	Actual: 1162017785
TEST PASSED

Testing pile# 2
Expected: 1874405870	Actual: 1874405870
TEST PASSED

Testing pile# 3
Expected: 687489778	Actual: 687489778
TEST PASSED

Testing pile# 4
Expected: -1609565184	Actual: -1609565184
TEST PASSED

Testing pile# 5
Expected: -311851883	Actual: -311851883
TEST PASSED

Testing pile# 6
Expected: 1150698237	Actual: 1150698237
TEST PASSED

Testing pile# 7
Expected: -839055940	Actual: -839055940
TEST PASSED

Testing pile# 8
Expected: -1904613319	Actual: -1904613319
TEST PASSED

Testing pile# 9
Expected: 1263970772	Actual: 1263970772
TEST PASSED

Testing pile# 10
Expected: 2044230211	Actual: 2044230211
TEST PASSED

Testing pile# 11
Expected: -1130504892	Actual: -1130504892
TEST PASSED

Testing pile# 12
Expected: -1917810024	Actual: -1917810024
TEST PASSED

Testing pile# 13
Expected: 466791810	Actual: 466791810
TEST PASSED

Testing pile# 14
Expected: 471020168	Actual: 471020168
TEST PASSED

Testing pile# 15
Expected: 1661221385	Actual: 1661221385
TEST PASSED

Testing pile# 16
Expected: 521102585	Actual: 521102585
TEST PASSED

Testing pile# 17
Expected: 667436030	Actual: 667436030
TEST PASSED

Testing pile# 18
Expected: -1738897822	Actual: -1738897822
TEST PASSED

Testing pile# 19
Expected: -1921968493	Actual: -1921968493
TEST PASSED

Testing pile# 20
Expected: 1219693205	Actual: 1219693205
TEST PASSED

Testing pile# 21
Expected: 1501720769	Actual: 1501720769
TEST PASSED

Testing pile# 22
Expected: -540559651	Actual: -540559651
TEST PASSED

Testing pile# 23
Expected: 96413853	Actual: 96413853
TEST PASSED

Testing pile# 24
Expected: 1436817817	Actual: 1436817817
TEST PASSED

Testing pile# 25
Expected: 1440894322	Actual: 1440894322
TEST PASSED

Testing pile# 26
Expected: 294667887	Actual: 294667887
TEST PASSED

Testing that there was no effect on other player(s)

Skipping tested player
Testing player #1
Testing other player's hand count(s)
Expected: -1707002904	Actual: -1707002904
TEST PASSED

Testing other player's deck count(s)
Expected: 1785329563	Actual: 1785329563
TEST PASSED

Testing other player's discard count(s)
Expected: 1754439197	Actual: 1754439197
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
10 Tests Failed over 10 runs of test suite.
File 'randomtestadventurer.c'
Lines executed:95.07% of 142
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:6.46% of 557
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************
        -:    2:Christian Roccanova
        -:    3:CS362-400
        -:    4:7/7/2018
        -:    5:Assignment 2 - Refactor
        -:    6:********************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include <stdlib.h>
        -:   15:
    #####:   16:int compare(const void* a, const void* b) {
    #####:   17:	if (*(int*)a > *(int*)b)
    #####:   18:		return 1;
    #####:   19:	if (*(int*)a < *(int*)b)
    #####:   20:		return -1;
    #####:   21:	return 0;
        -:   22:}
        -:   23:
    #####:   24:struct gameState* newGame() {
    #####:   25:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   26:	return g;
        -:   27:}
        -:   28:
    #####:   29:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   30:	int k8, int k9, int k10) {
    #####:   31:	int* k = malloc(10 * sizeof(int));
    #####:   32:	k[0] = k1;
    #####:   33:	k[1] = k2;
    #####:   34:	k[2] = k3;
    #####:   35:	k[3] = k4;
    #####:   36:	k[4] = k5;
    #####:   37:	k[5] = k6;
    #####:   38:	k[6] = k7;
    #####:   39:	k[7] = k8;
    #####:   40:	k[8] = k9;
    #####:   41:	k[9] = k10;
    #####:   42:	return k;
        -:   43:}
        -:   44:
    #####:   45:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   46:	struct gameState *state) {
        -:   47:
        -:   48:	int i;
        -:   49:	int j;
        -:   50:	int it;
        -:   51:	//set up random number generator
    #####:   52:	SelectStream(1);
    #####:   53:	PutSeed((long)randomSeed);
        -:   54:
        -:   55:	//check number of players
    #####:   56:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   57:	{
    #####:   58:		return -1;
        -:   59:	}
        -:   60:
        -:   61:	//set number of players
    #####:   62:	state->numPlayers = numPlayers;
        -:   63:
        -:   64:	//check selected kingdom cards are different
    #####:   65:	for (i = 0; i < 10; i++)
        -:   66:	{
    #####:   67:		for (j = 0; j < 10; j++)
        -:   68:		{
    #####:   69:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   70:			{
    #####:   71:				return -1;
        -:   72:			}
        -:   73:		}
        -:   74:	}
        -:   75:
        -:   76:
        -:   77:	//initialize supply
        -:   78:	///////////////////////////////
        -:   79:
        -:   80:	//set number of Curse cards
    #####:   81:	if (numPlayers == 2)
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 10;
        -:   84:	}
    #####:   85:	else if (numPlayers == 3)
        -:   86:	{
    #####:   87:		state->supplyCount[curse] = 20;
        -:   88:	}
        -:   89:	else
        -:   90:	{
    #####:   91:		state->supplyCount[curse] = 30;
        -:   92:	}
        -:   93:
        -:   94:	//set number of Victory cards
    #####:   95:	if (numPlayers == 2)
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 8;
    #####:   98:		state->supplyCount[duchy] = 8;
    #####:   99:		state->supplyCount[province] = 8;
        -:  100:	}
        -:  101:	else
        -:  102:	{
    #####:  103:		state->supplyCount[estate] = 12;
    #####:  104:		state->supplyCount[duchy] = 12;
    #####:  105:		state->supplyCount[province] = 12;
        -:  106:	}
        -:  107:
        -:  108:	//set number of Treasure cards
    #####:  109:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  110:	state->supplyCount[silver] = 40;
    #####:  111:	state->supplyCount[gold] = 30;
        -:  112:
        -:  113:	//set number of Kingdom cards
    #####:  114:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  115:	{
    #####:  116:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  117:		{
    #####:  118:			if (kingdomCards[j] == i)
        -:  119:			{
        -:  120:				//check if card is a 'Victory' Kingdom card
    #####:  121:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  122:				{
    #####:  123:					if (numPlayers == 2) {
    #####:  124:						state->supplyCount[i] = 8;
        -:  125:					}
    #####:  126:					else { state->supplyCount[i] = 12; }
        -:  127:				}
        -:  128:				else
        -:  129:				{
    #####:  130:					state->supplyCount[i] = 10;
        -:  131:				}
    #####:  132:				break;
        -:  133:			}
        -:  134:			else    //card is not in the set choosen for the game
        -:  135:			{
    #####:  136:				state->supplyCount[i] = -1;
        -:  137:			}
        -:  138:		}
        -:  139:
        -:  140:	}
        -:  141:
        -:  142:	////////////////////////
        -:  143:	//supply intilization complete
        -:  144:
        -:  145:	//set player decks
    #####:  146:	for (i = 0; i < numPlayers; i++)
        -:  147:	{
    #####:  148:		state->deckCount[i] = 0;
    #####:  149:		for (j = 0; j < 3; j++)
        -:  150:		{
    #####:  151:			state->deck[i][j] = estate;
    #####:  152:			state->deckCount[i]++;
        -:  153:		}
    #####:  154:		for (j = 3; j < 10; j++)
        -:  155:		{
    #####:  156:			state->deck[i][j] = copper;
    #####:  157:			state->deckCount[i]++;
        -:  158:		}
        -:  159:	}
        -:  160:
        -:  161:	//shuffle player decks
    #####:  162:	for (i = 0; i < numPlayers; i++)
        -:  163:	{
    #####:  164:		if (shuffle(i, state) < 0)
        -:  165:		{
    #####:  166:			return -1;
        -:  167:		}
        -:  168:	}
        -:  169:
        -:  170:	//draw player hands
    #####:  171:	for (i = 0; i < numPlayers; i++)
        -:  172:	{
        -:  173:		//initialize hand size to zero
    #####:  174:		state->handCount[i] = 0;
    #####:  175:		state->discardCount[i] = 0;
        -:  176:		//draw 5 cards
        -:  177:		// for (j = 0; j < 5; j++)
        -:  178:		//	{
        -:  179:		//	  drawCard(i, state);
        -:  180:		//	}
        -:  181:	}
        -:  182:
        -:  183:	//set embargo tokens to 0 for all supply piles
    #####:  184:	for (i = 0; i <= treasure_map; i++)
        -:  185:	{
    #####:  186:		state->embargoTokens[i] = 0;
        -:  187:	}
        -:  188:
        -:  189:	//initialize first player's turn
    #####:  190:	state->outpostPlayed = 0;
    #####:  191:	state->phase = 0;
    #####:  192:	state->numActions = 1;
    #####:  193:	state->numBuys = 1;
    #####:  194:	state->playedCardCount = 0;
    #####:  195:	state->whoseTurn = 0;
    #####:  196:	state->handCount[state->whoseTurn] = 0;
        -:  197:	//int it; move to top
        -:  198:
        -:  199:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  200:	for (it = 0; it < 5; it++) {
    #####:  201:		drawCard(state->whoseTurn, state);
        -:  202:	}
        -:  203:
    #####:  204:	updateCoins(state->whoseTurn, state, 0);
        -:  205:
    #####:  206:	return 0;
        -:  207:}
        -:  208:
    #####:  209:int shuffle(int player, struct gameState *state) {
        -:  210:
        -:  211:
        -:  212:	int newDeck[MAX_DECK];
    #####:  213:	int newDeckPos = 0;
        -:  214:	int card;
        -:  215:	int i;
        -:  216:
    #####:  217:	if (state->deckCount[player] < 1)
    #####:  218:		return -1;
    #####:  219:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  220:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  221:
    #####:  222:	while (state->deckCount[player] > 0) {
    #####:  223:		card = floor(Random() * state->deckCount[player]);
    #####:  224:		newDeck[newDeckPos] = state->deck[player][card];
    #####:  225:		newDeckPos++;
    #####:  226:		for (i = card; i < state->deckCount[player] - 1; i++) {
    #####:  227:			state->deck[player][i] = state->deck[player][i + 1];
        -:  228:		}
    #####:  229:		state->deckCount[player]--;
        -:  230:	}
    #####:  231:	for (i = 0; i < newDeckPos; i++) {
    #####:  232:		state->deck[player][i] = newDeck[i];
    #####:  233:		state->deckCount[player]++;
        -:  234:	}
        -:  235:
    #####:  236:	return 0;
        -:  237:}
        -:  238:
    #####:  239:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  240:{
        -:  241:	int card;
    #####:  242:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  243:
        -:  244:								//check if it is the right phase
    #####:  245:	if (state->phase != 0)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//check if player has enough actions
    #####:  251:	if (state->numActions < 1)
        -:  252:	{
    #####:  253:		return -1;
        -:  254:	}
        -:  255:
        -:  256:	//get card played
    #####:  257:	card = handCard(handPos, state);
        -:  258:
        -:  259:	//check if selected card is an action
    #####:  260:	if (card < adventurer || card > treasure_map)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//play card
    #####:  266:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  267:	{
    #####:  268:		return -1;
        -:  269:	}
        -:  270:
        -:  271:	//reduce number of actions
    #####:  272:	state->numActions--;
        -:  273:
        -:  274:	//update coins (Treasure cards may be added with card draws)
    #####:  275:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  276:
    #####:  277:	return 0;
        -:  278:}
        -:  279:
    #####:  280:int buyCard(int supplyPos, struct gameState *state) {
        -:  281:	int who;
        -:  282:	if (DEBUG) {
        -:  283:		printf("Entering buyCard...\n");
        -:  284:	}
        -:  285:
        -:  286:	// I don't know what to do about the phase thing.
        -:  287:
    #####:  288:	who = state->whoseTurn;
        -:  289:
    #####:  290:	if (state->numBuys < 1) {
        -:  291:		if (DEBUG)
        -:  292:			printf("You do not have any buys left\n");
    #####:  293:		return -1;
        -:  294:	}
    #####:  295:	else if (supplyCount(supplyPos, state) <1) {
        -:  296:		if (DEBUG)
        -:  297:			printf("There are not any of that type of card left\n");
    #####:  298:		return -1;
        -:  299:	}
    #####:  300:	else if (state->coins < getCost(supplyPos)) {
        -:  301:		if (DEBUG)
        -:  302:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  303:		return -1;
        -:  304:	}
        -:  305:	else {
    #####:  306:		state->phase = 1;
        -:  307:		//state->supplyCount[supplyPos]--;
    #####:  308:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  309:
    #####:  310:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  311:		state->numBuys--;
        -:  312:		if (DEBUG)
        -:  313:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  314:	}
        -:  315:
        -:  316:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  317:	//state->discardCount[who]++;
        -:  318:
    #####:  319:	return 0;
        -:  320:}
        -:  321:
    #####:  322:int numHandCards(struct gameState *state) {
    #####:  323:	return state->handCount[whoseTurn(state)];
        -:  324:}
        -:  325:
    #####:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:	int currentPlayer = whoseTurn(state);
    #####:  328:	return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
    #####:  331:int supplyCount(int card, struct gameState *state) {
    #####:  332:	return state->supplyCount[card];
        -:  333:}
        -:  334:
    #####:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:	int i;
    #####:  337:	int count = 0;
        -:  338:
    #####:  339:	for (i = 0; i < state->deckCount[player]; i++)
        -:  340:	{
    #####:  341:		if (state->deck[player][i] == card) count++;
        -:  342:	}
        -:  343:
    #####:  344:	for (i = 0; i < state->handCount[player]; i++)
        -:  345:	{
    #####:  346:		if (state->hand[player][i] == card) count++;
        -:  347:	}
        -:  348:
    #####:  349:	for (i = 0; i < state->discardCount[player]; i++)
        -:  350:	{
    #####:  351:		if (state->discard[player][i] == card) count++;
        -:  352:	}
        -:  353:
    #####:  354:	return count;
        -:  355:}
        -:  356:
       10:  357:int whoseTurn(struct gameState *state) {
       10:  358:	return state->whoseTurn;
        -:  359:}
        -:  360:
    #####:  361:int endTurn(struct gameState *state) {
        -:  362:	int k;
        -:  363:	int i;
    #####:  364:	int currentPlayer = whoseTurn(state);
        -:  365:
        -:  366:	//Discard hand
    #####:  367:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  368:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  369:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  370:	}
    #####:  371:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  372:
        -:  373:										//Code for determining the player
    #####:  374:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  375:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  376:	}
        -:  377:	else {
    #####:  378:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  379:	}
        -:  380:
    #####:  381:	state->outpostPlayed = 0;
    #####:  382:	state->phase = 0;
    #####:  383:	state->numActions = 1;
    #####:  384:	state->coins = 0;
    #####:  385:	state->numBuys = 1;
    #####:  386:	state->playedCardCount = 0;
    #####:  387:	state->handCount[state->whoseTurn] = 0;
        -:  388:
        -:  389:	//int k; move to top
        -:  390:	//Next player draws hand
    #####:  391:	for (k = 0; k < 5; k++) {
    #####:  392:		drawCard(state->whoseTurn, state);//Draw a card
        -:  393:	}
        -:  394:
        -:  395:	//Update money
    #####:  396:	updateCoins(state->whoseTurn, state, 0);
        -:  397:
    #####:  398:	return 0;
        -:  399:}
        -:  400:
    #####:  401:int isGameOver(struct gameState *state) {
        -:  402:	int i;
        -:  403:	int j;
        -:  404:
        -:  405:	//if stack of Province cards is empty, the game ends
    #####:  406:	if (state->supplyCount[province] == 0)
        -:  407:	{
    #####:  408:		return 1;
        -:  409:	}
        -:  410:
        -:  411:	//if three supply pile are at 0, the game ends
    #####:  412:	j = 0;
    #####:  413:	for (i = 0; i < 25; i++)
        -:  414:	{
    #####:  415:		if (state->supplyCount[i] == 0)
        -:  416:		{
    #####:  417:			j++;
        -:  418:		}
        -:  419:	}
    #####:  420:	if (j >= 3)
        -:  421:	{
    #####:  422:		return 1;
        -:  423:	}
        -:  424:
    #####:  425:	return 0;
        -:  426:}
        -:  427:
    #####:  428:int scoreFor(int player, struct gameState *state) {
        -:  429:
        -:  430:	int i;
    #####:  431:	int score = 0;
        -:  432:	//score from hand
    #####:  433:	for (i = 0; i < state->handCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  441:	}
        -:  442:
        -:  443:	//score from discard
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  452:	}
        -:  453:
        -:  454:	//score from deck
    #####:  455:	for (i = 0; i < state->discardCount[player]; i++)
        -:  456:	{
    #####:  457:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  458:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  459:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  460:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  461:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  462:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  463:	}
        -:  464:
    #####:  465:	return score;
        -:  466:}
        -:  467:
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  469:	int i;
        -:  470:	int j;
        -:  471:	int highScore;
        -:  472:	int currentPlayer;
        -:  473:
        -:  474:	//get score for each player
    #####:  475:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  476:	{
        -:  477:		//set unused player scores to -9999
    #####:  478:		if (i >= state->numPlayers)
        -:  479:		{
    #####:  480:			players[i] = -9999;
        -:  481:		}
        -:  482:		else
        -:  483:		{
    #####:  484:			players[i] = scoreFor(i, state);
        -:  485:		}
        -:  486:	}
        -:  487:
        -:  488:	//find highest score
    #####:  489:	j = 0;
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if (players[i] > players[j])
        -:  493:		{
    #####:  494:			j = i;
        -:  495:		}
        -:  496:	}
    #####:  497:	highScore = players[j];
        -:  498:
        -:  499:	//add 1 to players who had less turns
    #####:  500:	currentPlayer = whoseTurn(state);
    #####:  501:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:	{
    #####:  503:		if (players[i] == highScore && i > currentPlayer)
        -:  504:		{
    #####:  505:			players[i]++;
        -:  506:		}
        -:  507:	}
        -:  508:
        -:  509:	//find new highest score
    #####:  510:	j = 0;
    #####:  511:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:	{
    #####:  513:		if (players[i] > players[j])
        -:  514:		{
    #####:  515:			j = i;
        -:  516:		}
        -:  517:	}
    #####:  518:	highScore = players[j];
        -:  519:
        -:  520:	//set winners in array to 1 and rest to 0
    #####:  521:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  522:	{
    #####:  523:		if (players[i] == highScore)
        -:  524:		{
    #####:  525:			players[i] = 1;
        -:  526:		}
        -:  527:		else
        -:  528:		{
    #####:  529:			players[i] = 0;
        -:  530:		}
        -:  531:	}
        -:  532:
    #####:  533:	return 0;
        -:  534:}
        -:  535:
      106:  536:int drawCard(int player, struct gameState *state)
        -:  537:{
        -:  538:	int count;
        -:  539:	int deckCounter;
      106:  540:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  541:
        -:  542:										//Step 1 Shuffle the discard pile back into a deck
        -:  543:		int i;
        -:  544:		//Move discard to deck
    #####:  545:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  546:			state->deck[player][i] = state->discard[player][i];
    #####:  547:			state->discard[player][i] = -1;
        -:  548:		}
        -:  549:
    #####:  550:		state->deckCount[player] = state->discardCount[player];
    #####:  551:		state->discardCount[player] = 0;//Reset discard
        -:  552:
        -:  553:										//Shufffle the deck
    #####:  554:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  555:
        -:  556:		if (DEBUG) {//Debug statements
        -:  557:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  558:		}
        -:  559:
    #####:  560:		state->discardCount[player] = 0;
        -:  561:
        -:  562:		//Step 2 Draw Card
    #####:  563:		count = state->handCount[player];//Get current player's hand count
        -:  564:
        -:  565:		if (DEBUG) {//Debug statements
        -:  566:			printf("Current hand count: %d\n", count);
        -:  567:		}
        -:  568:
    #####:  569:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  570:
    #####:  571:		if (deckCounter == 0)
    #####:  572:			return -1;
        -:  573:
    #####:  574:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  575:		state->deckCount[player]--;
    #####:  576:		state->handCount[player]++;//Increment hand count
        -:  577:	}
        -:  578:
        -:  579:	else {
      106:  580:		int count = state->handCount[player];//Get current hand count for player
        -:  581:		int deckCounter;
        -:  582:		if (DEBUG) {//Debug statements
        -:  583:			printf("Current hand count: %d\n", count);
        -:  584:		}
        -:  585:
      106:  586:		deckCounter = state->deckCount[player];//Create holder for the deck count
      106:  587:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      106:  588:		state->deckCount[player]--;
      106:  589:		state->handCount[player]++;//Increment hand count
        -:  590:	}
        -:  591:
      106:  592:	return 0;
        -:  593:}
        -:  594:
    #####:  595:int getCost(int cardNumber)
        -:  596:{
    #####:  597:	switch (cardNumber)
        -:  598:	{
        -:  599:	case curse:
    #####:  600:		return 0;
        -:  601:	case estate:
    #####:  602:		return 2;
        -:  603:	case duchy:
    #####:  604:		return 5;
        -:  605:	case province:
    #####:  606:		return 8;
        -:  607:	case copper:
    #####:  608:		return 0;
        -:  609:	case silver:
    #####:  610:		return 3;
        -:  611:	case gold:
    #####:  612:		return 6;
        -:  613:	case adventurer:
    #####:  614:		return 6;
        -:  615:	case council_room:
    #####:  616:		return 5;
        -:  617:	case feast:
    #####:  618:		return 4;
        -:  619:	case gardens:
    #####:  620:		return 4;
        -:  621:	case mine:
    #####:  622:		return 5;
        -:  623:	case remodel:
    #####:  624:		return 4;
        -:  625:	case smithy:
    #####:  626:		return 4;
        -:  627:	case village:
    #####:  628:		return 3;
        -:  629:	case baron:
    #####:  630:		return 4;
        -:  631:	case great_hall:
    #####:  632:		return 3;
        -:  633:	case minion:
    #####:  634:		return 5;
        -:  635:	case steward:
    #####:  636:		return 3;
        -:  637:	case tribute:
    #####:  638:		return 5;
        -:  639:	case ambassador:
    #####:  640:		return 3;
        -:  641:	case cutpurse:
    #####:  642:		return 4;
        -:  643:	case embargo:
    #####:  644:		return 2;
        -:  645:	case outpost:
    #####:  646:		return 5;
        -:  647:	case salvager:
    #####:  648:		return 4;
        -:  649:	case sea_hag:
    #####:  650:		return 4;
        -:  651:	case treasure_map:
    #####:  652:		return 4;
        -:  653:	}
        -:  654:
    #####:  655:	return -1;
        -:  656:}
        -:  657:
        -:  658:
       10:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:	int i;
        -:  662:	int j;
        -:  663:	int k;
        -:  664:	int x;
        -:  665:	int index;
       10:  666:	int currentPlayer = whoseTurn(state);
       10:  667:	int nextPlayer = currentPlayer + 1;
        -:  668:
       10:  669:	int tributeRevealedCards[2] = { -1, -1 };
        -:  670:	int temphand[MAX_HAND];// moved above the if statement
       10:  671:	int drawntreasure = 0;
        -:  672:	int cardDrawn;
       10:  673:	int z = 0;// this is the counter for the temp hand
       10:  674:	if (nextPlayer > (state->numPlayers - 1)) {
        2:  675:		nextPlayer = 0;
        -:  676:	}
        -:  677:			
        -:  678:
       10:  679:	int playAdventurer()
        -:  680:	{
       10:  681:		int drawntreasure = 0;
        -:  682:		int cardDrawn;
        -:  683:		
      126:  684:		while (drawntreasure < 2) {
      106:  685:			if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  686:				shuffle(currentPlayer, state);
        -:  687:				
        -:  688:			}
      106:  689:			drawCard(currentPlayer, state);
      106:  690:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        -:  691:			
        -:  692:			//bug removed for random test
      106:  693:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       20:  694:				drawntreasure++;
        -:  695:			else {
       86:  696:				temphand[z] = cardDrawn;
       86:  697:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       86:  698:				z++;
        -:  699:			}
        -:  700:			
        -:  701:		}
      106:  702:		while (z - 1 >= 0) {
       86:  703:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       86:  704:			z = z - 1;
        -:  705:			
        -:  706:		}
        -:  707:		
        -:  708:		
       10:  709:	}
        -:  710:
    #####:  711:	int playSmithy()
        -:  712:	{
        -:  713:		//bug: i <= 3 causes 4 cards to be drawn***********************************************************
        -:  714:		//+3 Cards
    #####:  715:		for (i = 0; i <= 3; i++)
        -:  716:		{
    #####:  717:			drawCard(currentPlayer, state);
        -:  718:		}
        -:  719:
        -:  720:		//discard card from hand
    #####:  721:		discardCard(handPos, currentPlayer, state, 0);
    #####:  722:		return 0;
        -:  723:	}
        -:  724:
    #####:  725:	int playMine()
        -:  726:	{
    #####:  727:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  730:		{
    #####:  731:			return -1;
        -:  732:		}
        -:  733:
    #####:  734:		if (choice2 > treasure_map || choice2 < curse)
        -:  735:		{
    #####:  736:			return -1;
        -:  737:		}
        -:  738:
    #####:  739:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  740:		{
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//bug: chosen card goes into discard rather than hand***************************************************
    #####:  745:		gainCard(choice2, state, 0, currentPlayer);
        -:  746:
        -:  747:		//discard card from hand
    #####:  748:		discardCard(handPos, currentPlayer, state, 0);
        -:  749:
        -:  750:		//discard trashed card
    #####:  751:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  752:		{
    #####:  753:			if (state->hand[currentPlayer][i] == j)
        -:  754:			{
    #####:  755:				discardCard(i, currentPlayer, state, 0);
    #####:  756:				break;
        -:  757:			}
        -:  758:		}
        -:  759:
    #####:  760:		return 0;
        -:  761:	}
        -:  762:
    #####:  763:	int playOutpost()
        -:  764:	{
        -:  765:		// bug: deletion of state->outpostPlayed++; allows multiple outpost plays without flag being set *********************************
        -:  766:
        -:  767:		//discard card
    #####:  768:		discardCard(handPos, currentPlayer, state, 0);
    #####:  769:		return 0;
        -:  770:	}
        -:  771:
    #####:  772:	int playGreat_hall()
        -:  773:	{
        -:  774:		//+1 Card
    #####:  775:		drawCard(currentPlayer, state);
        -:  776:
        -:  777:		//+1 Actions
    #####:  778:		state->numActions++;
        -:  779:
        -:  780:		//discard card from hand
    #####:  781:		discardCard(handPos, currentPlayer, state, 0);
    #####:  782:		return 0;
        -:  783:	}
        -:  784:
        -:  785:	//uses switch to select card and perform actions
       10:  786:	switch (card)
        -:  787:	{
        -:  788:	case adventurer:
        -:  789:
        -:  790:		
       10:  791:		playAdventurer();
       10:  792:		return 0;
        -:  793:
        -:  794:	case council_room:
        -:  795:		//+4 Cards
    #####:  796:		for (i = 0; i < 4; i++)
        -:  797:		{
    #####:  798:			drawCard(currentPlayer, state);
        -:  799:		}
        -:  800:
        -:  801:		//+1 Buy
    #####:  802:		state->numBuys++;
        -:  803:
        -:  804:		//Each other player draws a card
    #####:  805:		for (i = 0; i < state->numPlayers; i++)
        -:  806:		{
    #####:  807:			if (i != currentPlayer)
        -:  808:			{
    #####:  809:				drawCard(i, state);
        -:  810:			}
        -:  811:		}
        -:  812:
        -:  813:		//put played card in played card pile
    #####:  814:		discardCard(handPos, currentPlayer, state, 0);
        -:  815:
    #####:  816:		return 0;
        -:  817:
        -:  818:	case feast:
        -:  819:		//gain card with cost up to 5
        -:  820:		//Backup hand
    #####:  821:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  822:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  823:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  824:		}
        -:  825:		//Backup hand
        -:  826:
        -:  827:		//Update Coins for Buy
    #####:  828:		updateCoins(currentPlayer, state, 5);
    #####:  829:		x = 1;//Condition to loop on
    #####:  830:		while (x == 1) {//Buy one card
    #####:  831:			if (supplyCount(choice1, state) <= 0) {
        -:  832:				if (DEBUG)
        -:  833:					printf("None of that card left, sorry!\n");
        -:  834:
        -:  835:				if (DEBUG) {
        -:  836:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  837:				}
        -:  838:			}
    #####:  839:			else if (state->coins < getCost(choice1)) {
    #####:  840:				printf("That card is too expensive!\n");
        -:  841:
        -:  842:				if (DEBUG) {
        -:  843:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  844:				}
        -:  845:			}
        -:  846:			else {
        -:  847:
        -:  848:				if (DEBUG) {
        -:  849:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:				}
        -:  851:
    #####:  852:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  853:				x = 0;//No more buying cards
        -:  854:
        -:  855:				if (DEBUG) {
        -:  856:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:				}
        -:  858:
        -:  859:			}
        -:  860:		}
        -:  861:
        -:  862:		//Reset Hand
    #####:  863:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  864:			state->hand[currentPlayer][i] = temphand[i];
    #####:  865:			temphand[i] = -1;
        -:  866:		}
        -:  867:		//Reset Hand
        -:  868:
    #####:  869:		return 0;
        -:  870:
        -:  871:	case gardens:
    #####:  872:		return -1;
        -:  873:
        -:  874:	case mine:
        -:  875:
    #####:  876:		playMine();
        -:  877:
        -:  878:
        -:  879:
        -:  880:	case remodel:
    #####:  881:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  884:		{
    #####:  885:			return -1;
        -:  886:		}
        -:  887:
    #####:  888:		gainCard(choice2, state, 0, currentPlayer);
        -:  889:
        -:  890:		//discard card from hand
    #####:  891:		discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:		//discard trashed card
    #####:  894:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:		{
    #####:  896:			if (state->hand[currentPlayer][i] == j)
        -:  897:			{
    #####:  898:				discardCard(i, currentPlayer, state, 0);
    #####:  899:				break;
        -:  900:			}
        -:  901:		}
        -:  902:
        -:  903:
    #####:  904:		return 0;
        -:  905:
        -:  906:	case smithy:
        -:  907:
    #####:  908:		playSmithy();
    #####:  909:		return 0;
        -:  910:
        -:  911:
        -:  912:	case baron:
    #####:  913:		state->numBuys++;//Increase buys by 1!
    #####:  914:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  915:			int p = 0;//Iterator for hand!
    #####:  916:			int card_not_discarded = 1;//Flag for discard set!
    #####:  917:			while (card_not_discarded) {
    #####:  918:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  919:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  920:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  921:					state->discardCount[currentPlayer]++;
    #####:  922:					for (; p < state->handCount[currentPlayer]; p++) {
    #####:  923:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  924:					}
    #####:  925:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  926:					state->handCount[currentPlayer]--;
    #####:  927:					card_not_discarded = 0;//Exit the loop
        -:  928:				}
    #####:  929:				else if (p > state->handCount[currentPlayer]) {
        -:  930:					if (DEBUG) {
        -:  931:						printf("No estate cards in your hand, invalid choice\n");
        -:  932:						printf("Must gain an estate if there are any\n");
        -:  933:					}
    #####:  934:					if (supplyCount(estate, state) > 0) {
    #####:  935:						gainCard(estate, state, 0, currentPlayer);
    #####:  936:						state->supplyCount[estate]--;//Decrement estates
    #####:  937:						if (supplyCount(estate, state) == 0) {
    #####:  938:							isGameOver(state);
        -:  939:						}
        -:  940:					}
    #####:  941:					card_not_discarded = 0;//Exit the loop
        -:  942:				}
        -:  943:
        -:  944:				else {
    #####:  945:					p++;//Next card
        -:  946:				}
        -:  947:			}
        -:  948:		}
        -:  949:
        -:  950:		else {
    #####:  951:			if (supplyCount(estate, state) > 0) {
    #####:  952:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  953:				state->supplyCount[estate]--;//Decrement Estates
    #####:  954:				if (supplyCount(estate, state) == 0) {
    #####:  955:					isGameOver(state);
        -:  956:				}
        -:  957:			}
        -:  958:		}
        -:  959:
        -:  960:
    #####:  961:		return 0;
        -:  962:
        -:  963:	case great_hall:
        -:  964:
    #####:  965:		playGreat_hall();
    #####:  966:		return 0;
        -:  967:
        -:  968:	case minion:
        -:  969:		//+1 action
    #####:  970:		state->numActions++;
        -:  971:
        -:  972:		//discard card from hand
    #####:  973:		discardCard(handPos, currentPlayer, state, 0);
        -:  974:
    #####:  975:		if (choice1)		//+2 coins
        -:  976:		{
    #####:  977:			state->coins = state->coins + 2;
        -:  978:		}
        -:  979:
    #####:  980:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  981:		{
        -:  982:			//discard hand
    #####:  983:			while (numHandCards(state) > 0)
        -:  984:			{
    #####:  985:				discardCard(handPos, currentPlayer, state, 0);
        -:  986:			}
        -:  987:
        -:  988:			//draw 4
    #####:  989:			for (i = 0; i < 4; i++)
        -:  990:			{
    #####:  991:				drawCard(currentPlayer, state);
        -:  992:			}
        -:  993:
        -:  994:			//other players discard hand and redraw if hand size > 4
    #####:  995:			for (i = 0; i < state->numPlayers; i++)
        -:  996:			{
    #####:  997:				if (i != currentPlayer)
        -:  998:				{
    #####:  999:					if (state->handCount[i] > 4)
        -: 1000:					{
        -: 1001:						//discard hand
    #####: 1002:						while (state->handCount[i] > 0)
        -: 1003:						{
    #####: 1004:							discardCard(handPos, i, state, 0);
        -: 1005:						}
        -: 1006:
        -: 1007:						//draw 4
    #####: 1008:						for (j = 0; j < 4; j++)
        -: 1009:						{
    #####: 1010:							drawCard(i, state);
        -: 1011:						}
        -: 1012:					}
        -: 1013:				}
        -: 1014:			}
        -: 1015:
        -: 1016:		}
    #####: 1017:		return 0;
        -: 1018:
        -: 1019:	case steward:
    #####: 1020:		if (choice1 == 1)
        -: 1021:		{
        -: 1022:			//+2 cards
    #####: 1023:			drawCard(currentPlayer, state);
    #####: 1024:			drawCard(currentPlayer, state);
        -: 1025:		}
    #####: 1026:		else if (choice1 == 2)
        -: 1027:		{
        -: 1028:			//+2 coins
    #####: 1029:			state->coins = state->coins + 2;
        -: 1030:		}
        -: 1031:		else
        -: 1032:		{
        -: 1033:			//trash 2 cards in hand
    #####: 1034:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1035:			discardCard(choice3, currentPlayer, state, 1);
        -: 1036:		}
        -: 1037:
        -: 1038:		//discard card from hand
    #####: 1039:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1040:		return 0;
        -: 1041:
        -: 1042:	case tribute:
    #####: 1043:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1044:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1045:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1046:				state->deckCount[nextPlayer]--;
        -: 1047:			}
    #####: 1048:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1049:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1050:				state->discardCount[nextPlayer]--;
        -: 1051:			}
        -: 1052:			else {
        -: 1053:				//No Card to Reveal
        -: 1054:				if (DEBUG) {
        -: 1055:					printf("No cards to reveal\n");
        -: 1056:				}
        -: 1057:			}
        -: 1058:		}
        -: 1059:
        -: 1060:		else {
    #####: 1061:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1062:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1063:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1064:					state->deckCount[nextPlayer]++;
    #####: 1065:					state->discard[nextPlayer][i] = -1;
    #####: 1066:					state->discardCount[nextPlayer]--;
        -: 1067:				}
        -: 1068:
    #####: 1069:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1070:			}
    #####: 1071:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1072:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:			state->deckCount[nextPlayer]--;
    #####: 1074:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1075:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:			state->deckCount[nextPlayer]--;
        -: 1077:		}
        -: 1078:
    #####: 1079:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####: 1080:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1081:			state->playedCardCount++;
    #####: 1082:			tributeRevealedCards[1] = -1;
        -: 1083:		}
        -: 1084:
    #####: 1085:		for (i = 0; i <= 2; i++) {
    #####: 1086:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1087:				state->coins += 2;
        -: 1088:			}
        -: 1089:
    #####: 1090:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1091:				drawCard(currentPlayer, state);
    #####: 1092:				drawCard(currentPlayer, state);
        -: 1093:			}
        -: 1094:			else {//Action Card
    #####: 1095:				state->numActions = state->numActions + 2;
        -: 1096:			}
        -: 1097:		}
        -: 1098:
    #####: 1099:		return 0;
        -: 1100:
        -: 1101:	case ambassador:
    #####: 1102:		j = 0;		//used to check if player has enough cards to discard
        -: 1103:
    #####: 1104:		if (choice2 > 2 || choice2 < 0)
        -: 1105:		{
    #####: 1106:			return -1;
        -: 1107:		}
        -: 1108:
    #####: 1109:		if (choice1 == handPos)
        -: 1110:		{
    #####: 1111:			return -1;
        -: 1112:		}
        -: 1113:
    #####: 1114:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:		{
    #####: 1116:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1117:			{
    #####: 1118:				j++;
        -: 1119:			}
        -: 1120:		}
    #####: 1121:		if (j < choice2)
        -: 1122:		{
    #####: 1123:			return -1;
        -: 1124:		}
        -: 1125:
        -: 1126:		if (DEBUG)
        -: 1127:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1128:
        -: 1129:		//increase supply count for choosen card by amount being discarded
    #####: 1130:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1131:
        -: 1132:		//each other player gains a copy of revealed card
    #####: 1133:		for (i = 0; i < state->numPlayers; i++)
        -: 1134:		{
    #####: 1135:			if (i != currentPlayer)
        -: 1136:			{
    #####: 1137:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1138:			}
        -: 1139:		}
        -: 1140:
        -: 1141:		//discard played card from hand
    #####: 1142:		discardCard(handPos, currentPlayer, state, 0);
        -: 1143:
        -: 1144:		//trash copies of cards returned to supply
    #####: 1145:		for (j = 0; j < choice2; j++)
        -: 1146:		{
    #####: 1147:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1148:			{
    #####: 1149:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1150:				{
    #####: 1151:					discardCard(i, currentPlayer, state, 1);
    #####: 1152:					break;
        -: 1153:				}
        -: 1154:			}
        -: 1155:		}
        -: 1156:
    #####: 1157:		return 0;
        -: 1158:
        -: 1159:	case cutpurse:
        -: 1160:
    #####: 1161:		updateCoins(currentPlayer, state, 2);
    #####: 1162:		for (i = 0; i < state->numPlayers; i++)
        -: 1163:		{
    #####: 1164:			if (i != currentPlayer)
        -: 1165:			{
    #####: 1166:				for (j = 0; j < state->handCount[i]; j++)
        -: 1167:				{
    #####: 1168:					if (state->hand[i][j] == copper)
        -: 1169:					{
    #####: 1170:						discardCard(j, i, state, 0);
    #####: 1171:						break;
        -: 1172:					}
    #####: 1173:					if (j == state->handCount[i])
        -: 1174:					{
    #####: 1175:						for (k = 0; k < state->handCount[i]; k++)
        -: 1176:						{
        -: 1177:							if (DEBUG)
        -: 1178:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1179:						}
    #####: 1180:						break;
        -: 1181:					}
        -: 1182:				}
        -: 1183:
        -: 1184:			}
        -: 1185:
        -: 1186:		}
        -: 1187:
        -: 1188:		//discard played card from hand
    #####: 1189:		discardCard(handPos, currentPlayer, state, 0);
        -: 1190:
    #####: 1191:		return 0;
        -: 1192:
        -: 1193:
        -: 1194:	case embargo:
        -: 1195:		//+2 Coins
    #####: 1196:		state->coins = state->coins + 2;
        -: 1197:
        -: 1198:		//see if selected pile is in play
    #####: 1199:		if (state->supplyCount[choice1] == -1)
        -: 1200:		{
    #####: 1201:			return -1;
        -: 1202:		}
        -: 1203:
        -: 1204:		//add embargo token to selected supply pile
    #####: 1205:		state->embargoTokens[choice1]++;
        -: 1206:
        -: 1207:		//trash card
    #####: 1208:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:		return 0;
        -: 1210:
        -: 1211:	case outpost:
        -: 1212:
    #####: 1213:		playOutpost();
        -: 1214:
        -: 1215:
        -: 1216:	case salvager:
        -: 1217:		//+1 buy
    #####: 1218:		state->numBuys++;
        -: 1219:
    #####: 1220:		if (choice1)
        -: 1221:		{
        -: 1222:			//gain coins equal to trashed card
    #####: 1223:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1224:			//trash card
    #####: 1225:			discardCard(choice1, currentPlayer, state, 1);
        -: 1226:		}
        -: 1227:
        -: 1228:		//discard card
    #####: 1229:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:		return 0;
        -: 1231:
        -: 1232:	case sea_hag:
    #####: 1233:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1234:			if (i != currentPlayer) {
    #####: 1235:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1236:				state->discardCount[i]++;
    #####: 1237:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1238:			}
        -: 1239:		}
    #####: 1240:		return 0;
        -: 1241:
        -: 1242:	case treasure_map:
        -: 1243:		//search hand for another treasure_map
    #####: 1244:		index = -1;
    #####: 1245:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1246:		{
    #####: 1247:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1248:			{
    #####: 1249:				index = i;
    #####: 1250:				break;
        -: 1251:			}
        -: 1252:		}
    #####: 1253:		if (index > -1)
        -: 1254:		{
        -: 1255:			//trash both treasure cards
    #####: 1256:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1257:			discardCard(index, currentPlayer, state, 1);
        -: 1258:
        -: 1259:			//gain 4 Gold cards
    #####: 1260:			for (i = 0; i < 4; i++)
        -: 1261:			{
    #####: 1262:				gainCard(gold, state, 1, currentPlayer);
        -: 1263:			}
        -: 1264:
        -: 1265:			//return success
    #####: 1266:			return 1;
        -: 1267:		}
        -: 1268:
        -: 1269:		//no second treasure_map found in hand
    #####: 1270:		return -1;
        -: 1271:	}
        -: 1272:
    #####: 1273:	return -1;
        -: 1274:}
        -: 1275:
    #####: 1276:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1277:{
        -: 1278:
        -: 1279:	//if card is not trashed, added to Played pile 
    #####: 1280:	if (trashFlag < 1)
        -: 1281:	{
        -: 1282:		//add card to played pile
    #####: 1283:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1284:		state->playedCardCount++;
        -: 1285:	}
        -: 1286:
        -: 1287:	//set played card to -1
    #####: 1288:	state->hand[currentPlayer][handPos] = -1;
        -: 1289:
        -: 1290:	//remove card from player's hand
    #####: 1291:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1292:	{
        -: 1293:		//reduce number of cards in hand
    #####: 1294:		state->handCount[currentPlayer]--;
        -: 1295:	}
    #####: 1296:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1297:	{
        -: 1298:		//reduce number of cards in hand
    #####: 1299:		state->handCount[currentPlayer]--;
        -: 1300:	}
        -: 1301:	else
        -: 1302:	{
        -: 1303:		//replace discarded card with last card in hand
    #####: 1304:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1305:		//set last card to -1
    #####: 1306:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1307:		//reduce number of cards in hand
    #####: 1308:		state->handCount[currentPlayer]--;
        -: 1309:	}
        -: 1310:
    #####: 1311:	return 0;
        -: 1312:}
        -: 1313:
    #####: 1314:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1315:{
        -: 1316:	//Note: supplyPos is enum of choosen card
        -: 1317:
        -: 1318:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1319:	if (supplyCount(supplyPos, state) < 1)
        -: 1320:	{
    #####: 1321:		return -1;
        -: 1322:	}
        -: 1323:
        -: 1324:	//added card for [whoseTurn] current player:
        -: 1325:	// toFlag = 0 : add to discard
        -: 1326:	// toFlag = 1 : add to deck
        -: 1327:	// toFlag = 2 : add to hand
        -: 1328:
    #####: 1329:	if (toFlag == 1)
        -: 1330:	{
    #####: 1331:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1332:		state->deckCount[player]++;
        -: 1333:	}
    #####: 1334:	else if (toFlag == 2)
        -: 1335:	{
    #####: 1336:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1337:		state->handCount[player]++;
        -: 1338:	}
        -: 1339:	else
        -: 1340:	{
    #####: 1341:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1342:		state->discardCount[player]++;
        -: 1343:	}
        -: 1344:
        -: 1345:	//decrease number in supply pile
    #####: 1346:	state->supplyCount[supplyPos]--;
        -: 1347:
    #####: 1348:	return 0;
        -: 1349:}
        -: 1350:
    #####: 1351:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1352:{
        -: 1353:	int i;
        -: 1354:
        -: 1355:	//reset coin count
    #####: 1356:	state->coins = 0;
        -: 1357:
        -: 1358:	//add coins for each Treasure card in player's hand
    #####: 1359:	for (i = 0; i < state->handCount[player]; i++)
        -: 1360:	{
    #####: 1361:		if (state->hand[player][i] == copper)
        -: 1362:		{
    #####: 1363:			state->coins += 1;
        -: 1364:		}
    #####: 1365:		else if (state->hand[player][i] == silver)
        -: 1366:		{
    #####: 1367:			state->coins += 2;
        -: 1368:		}
    #####: 1369:		else if (state->hand[player][i] == gold)
        -: 1370:		{
    #####: 1371:			state->coins += 3;
        -: 1372:		}
        -: 1373:	}
        -: 1374:
        -: 1375:	//add bonus
    #####: 1376:	state->coins += bonus;
        -: 1377:
    #####: 1378:	return 0;
        -: 1379:}
        -: 1380:
        -: 1381:
        -: 1382://end of dominion.c

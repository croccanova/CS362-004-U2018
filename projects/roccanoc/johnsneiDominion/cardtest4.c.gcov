        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests great hall card
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
       19:   17:void isTrue(int a, int b) 
        -:   18:{
       19:   19:	if (a == b) 
        -:   20:	{
       17:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
        2:   25:		printf("TEST FAILED\n");
        2:   26:		failCount++;
        -:   27:	}
       19:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv)
        -:   31:{
        -:   32:	//set arguments for initializeGame and cardEffect
        -:   33:	struct gameState control, test;
        1:   34:	int numPlayers = 2;
        1:   35:	int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   36:	int seed = 1000;
        1:   37:	int k[] = { adventurer, council_room, feast, gardens, mine,
        -:   38:		outpost, smithy, village, baron, great_hall };
        -:   39:	int expected;
        -:   40:	int actual;
        1:   41:	int playerA = 0;
        1:   42:	int playerB = 1;
        -:   43:
        1:   44:	initializeGame(numPlayers, k, seed, &control);
        -:   45:
        -:   46:	// copy the game state, test will actually be run while control will be manually modified to represent the expected values
        1:   47:	test = control;
        -:   48:
        1:   49:	printf("Running tests for great hall card\n");
        -:   50:
        1:   51:	cardEffect(great_hall, choice1, choice2, choice3, &test, handPos, &bonus);
        -:   52:
        -:   53:	//test hand count
        1:   54:	printf("\nTesting hand count\n");
        1:   55:	expected = control.handCount[playerA]; //1 cards gained, 1 card played
        1:   56:	actual = test.handCount[playerA];
        1:   57:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   58:	isTrue(expected, actual);
        -:   59:
        -:   60:	//test deck count
        1:   61:	printf("\nTesting deck count\n"); //deck decreases by 1
        1:   62:	expected = control.deckCount[playerA] - 1;
        1:   63:	actual = test.deckCount[playerA];
        1:   64:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   65:	isTrue(expected, actual);
        -:   66:
        -:   67:	//test action count
        1:   68:	printf("\nTesting that action count increases\n");
        1:   69:	expected = control.numActions + 1; //1 bonus action gained
        1:   70:	actual = test.numActions;
        1:   71:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   72:	isTrue(expected, actual);
        -:   73:
        -:   74:	//Tests to ensure victory cards are unchanged
        1:   75:	printf("\nTesting that victory card piles remain unchanged\n");
        1:   76:	printf("\nTesting province\n");
        1:   77:	actual = test.supplyCount[province];
        1:   78:	expected = control.supplyCount[province];
        1:   79:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   80:	isTrue(expected, actual);
        -:   81:
        1:   82:	printf("\nTesting duchy\n");
        1:   83:	actual = test.supplyCount[duchy];
        1:   84:	expected = control.supplyCount[duchy];
        1:   85:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   86:	isTrue(expected, actual);
        -:   87:
        1:   88:	printf("\nTesting estate\n");
        1:   89:	actual = test.supplyCount[duchy];
        1:   90:	expected = control.supplyCount[duchy];
        1:   91:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   92:	isTrue(expected, actual);
        -:   93:
        -:   94:	//Tests to ensure kingdom cards are unchanged
        1:   95:	printf("\nTesting that kingdom card piles remain unchanged\n");
       11:   96:	for (int i = 0; i < 10; i++) 
        -:   97:	{
       10:   98:		printf("\nTesting pile# %d\n", i);
       10:   99:		actual = test.supplyCount[k[i]];
       10:  100:		expected = control.supplyCount[k[i]];
       10:  101:		printf("Expected: %d	Actual: %d\n", expected, actual);
       10:  102:		isTrue(expected, actual);
        -:  103:	}
        -:  104:
        -:  105:	//Tests to ensure other player is not affected
        1:  106:	printf("\nTesting that there was no effect on playerB\n");
        1:  107:	printf("\nTesting playerB's hand count\n");
        1:  108:	actual = test.handCount[playerB];
        1:  109:	expected = control.handCount[playerB];
        1:  110:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  111:	isTrue(expected, actual);
        -:  112:
        1:  113:	printf("\nTesting playerB's deck count\n");
        1:  114:	actual = test.deckCount[playerB];
        1:  115:	expected = control.deckCount[playerB];
        1:  116:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  117:	isTrue(expected, actual);
        -:  118:
        1:  119:	printf("\nTesting playerB's discard count\n");
        1:  120:	actual = test.discardCount[playerB];
        1:  121:	expected = control.discardCount[playerB];
        1:  122:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  123:	isTrue(expected, actual);
        -:  124:
        -:  125:
        1:  126:	if (failCount > 0)
        -:  127:	{
        1:  128:		printf("\nFINAL RESULT: TEST FAILED\n");
        1:  129:		printf("Number of tests failed: %d\n", failCount);
        -:  130:	}
        -:  131:	else
        -:  132:	{
    #####:  133:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  134:	}
        -:  135:
        -:  136:
        1:  137:	return 0;
        -:  138:}

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	tests isGameOver()
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
        3:   17:void isTrue(int a, int b) 
        -:   18:{
        3:   19:	if (a == b) 
        -:   20:	{
        3:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
        -:   26:	}
        3:   27:}
        -:   28:
        1:   29:int main(int argc, char** argv) 
        -:   30:{
        -:   31:	struct gameState g;
        -:   32:	int i;
        1:   33:	int numSupplyPiles = 25;
        -:   34:	int actual;
        -:   35:	int expected;
        -:   36:
        -:   37:	/* initialize supply piles with one card */
       26:   38:	for (i = 0; i < numSupplyPiles; i++)
        -:   39:	{
       25:   40:		g.supplyCount[i] = 1;
        -:   41:	}
        -:   42:
        1:   43:	printf("Running tests for isGameOver() function\n");
        -:   44:
        -:   45:	//test with supply piles and provinces still having at least 1 card - game should not end
        1:   46:	printf("\nTesting province and supply piles not empty - expect return 0\n");
        1:   47:	expected = 0;
        1:   48:	actual = isGameOver(&g);
        1:   49:	isTrue(actual, expected);
        -:   50:	
        -:   51:	//test with empty stack of province cards - game should end
        1:   52:	printf("\nTesting province pile is empty - expect return 1\n");
        1:   53:	expected = 1;
        1:   54:	g.supplyCount[province] = 0;
        1:   55:	actual = isGameOver(&g);
        1:   56:	isTrue(actual, expected);
        -:   57:	
        -:   58:	//test with 3 empty supply piles - game should end
        1:   59:	printf("\nTesting 3 empty supply piles - expect return 1\n");
        1:   60:	expected = 1;
        1:   61:	g.supplyCount[province] = 1;
        1:   62:	g.supplyCount[adventurer] = 0;
        1:   63:	g.supplyCount[smithy] = 0;
        1:   64:	g.supplyCount[mine] = 0;
        1:   65:	actual = isGameOver(&g);
        1:   66:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   67:	isTrue(actual, expected);
        -:   68:	
        1:   69:	if (failCount > 0)
        -:   70:	{
    #####:   71:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:   72:		printf("Number of tests failed: %d\n", failCount);
        -:   73:	}
        -:   74:	else
        -:   75:	{
        1:   76:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:   77:	}
        1:   78:	return 0;
        -:   79:}

RESULTS OF DOMINION TEST SUITE:
TEST RESULTS FOR unittest1.c:
Running tests for gainCard() function

Testing empty pile
Expected: -1	Actual: -1
TEST PASSED

Testing addition of card to discard pile
Expected: 1	Actual: 1
TEST PASSED

Testing addition of card to deck
Expected: 6	Actual: 6
TEST PASSED

Testing addition of card to hand
TEST PASSED

Testing decrease in card supply
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
File 'unittest1.c'
Lines executed:91.11% of 45
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests gainCard()
        -:    6:*/ 
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
        5:   17:void isTrue(int a, int b) 
        -:   18:{
        5:   19:	if (a == b) 
        -:   20:	{
        5:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
    #####:   26:		failCount++;
        -:   27:	}
        5:   28:}
        -:   29:
        -:   30:
        1:   31:int main(int argc, char** argv) {
        -:   32:	
        1:   33:	int seed = 1000;
        1:   34:	int k[10] = { adventurer, council_room, feast, gardens, mine,
        -:   35:		remodel, smithy, village, baron, great_hall };	
        -:   36:	struct gameState g;
        -:   37:	int actual;
        -:   38:	int expected;
        -:   39:
        1:   40:	printf("Running tests for gainCard() function\n");
        -:   41:
        1:   42:	initializeGame(2, k, seed, &g);
        -:   43:
        -:   44:	//tests attempt to gain from an empty pile
        1:   45:	printf("\nTesting empty pile\n");
        1:   46:	g.supplyCount[smithy] = 0;
        1:   47:	expected = -1;
        1:   48:	actual = gainCard(smithy, &g, 0, 0);
        1:   49:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   50:	isTrue(expected, actual);
        1:   51:	g.supplyCount[smithy] = 10;
        -:   52:
        -:   53:	//tests that card is discarded when flag is 0
        1:   54:	printf("\nTesting addition of card to discard pile\n");
        1:   55:	expected = g.discardCount[0] + 1;
        1:   56:	gainCard(smithy, &g, 0, 0);
        1:   57:	actual = g.discardCount[0];
        1:   58:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   59:	isTrue(expected, actual);
        -:   60:
        -:   61:	//test that card is added to the deck when flag is 1
        1:   62:	printf("\nTesting addition of card to deck\n");
        1:   63:	expected = g.deckCount[0] + 1;
        1:   64:	gainCard(smithy, &g, 1, 0);
        1:   65:	actual = g.deckCount[0];
        1:   66:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   67:	isTrue(expected, actual);
        -:   68:
        -:   69:	//test that card is added to the hand when flag is 2
        1:   70:	printf("\nTesting addition of card to hand\n");
        1:   71:	expected = g.handCount[0] + 1;
        1:   72:	gainCard(smithy, &g, 2, 0);
        1:   73:	actual = g.handCount[0];
        1:   74:	isTrue(expected, actual);
        -:   75:
        -:   76:	//tests removal of card from supply count
        1:   77:	printf("\nTesting decrease in card supply\n");
        1:   78:	expected = g.supplyCount[smithy] - 1;
        1:   79:	gainCard(smithy, &g, 0, 0);
        1:   80:	actual = g.supplyCount[smithy];
        1:   81:	isTrue(expected, actual);
        -:   82:
        1:   83:	if (failCount > 0)
        -:   84:	{
    #####:   85:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:   86:		printf("Number of tests failed: %d\n", failCount);
        -:   87:	}
        -:   88:	else
        -:   89:	{
        1:   90:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:   91:	}
        -:   92:
        1:   93:	return 0;
        -:   94:}
File 'dominion.c'
Lines executed:18.44% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
        5:  325:int supplyCount(int card, struct gameState *state) {
        5:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        5:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        5:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        5:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        5:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  582:		state->deckCount[player]--;
        5:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        5:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
    #####:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
    #####:  813:	int currentPlayer = whoseTurn(state);
    #####:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
    #####:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
    #####:  820:	int z = 0;// this is the counter for the temp hand
    #####:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
    #####:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
    #####: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
    #####: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
    #####: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
    #####: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
    #####: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
    #####: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
    #####: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
    #####: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
    #####: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        5: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
        5: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
        1: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
        4: 1453:	if (toFlag == 1)
        -: 1454:	{
        1: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
        1: 1456:		state->deckCount[player]++;
        -: 1457:	}
        3: 1458:	else if (toFlag == 2)
        -: 1459:	{
        1: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
        1: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
        2: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
        4: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
        4: 1472:	return 0;
        -: 1473:}
        -: 1474:
        1: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        1: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
        6: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
        5: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        4: 1487:			state->coins += 1;
        -: 1488:		}
        1: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
        1: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        1: 1500:	state->coins += bonus;
        -: 1501:
        1: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR unittest2.c:
Running tests for updateCoins() function
Test with 0 coinsExpected: 0	Actual: 0
TEST PASSED

Testing with 5 coppers, no bonus - expect 5
Expected: 5	Actual: 5
TEST PASSED

Testing with 5 silvers, no bonus - expect 10
Expected: 10	Actual: 10
TEST PASSED

Testing with 5 golds, no bonus - expect 15
Expected: 15	Actual: 15
TEST PASSED

Testing 5 golds, +5 bonus - expect 20
Expected: 20	Actual: 20
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
File 'unittest2.c'
Lines executed:93.33% of 60
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	tests updateCoins()
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
        5:   17:void isTrue(int a, int b)
        -:   18:{
        5:   19:	if (a == b)
        -:   20:	{
        5:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
    #####:   26:		failCount++;
        -:   27:	}
        5:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv) 
        -:   31:{
        -:   32:	struct gameState g;
        1:   33:	int numPlayers = 2;
        1:   34:	int seed = 1000;
        1:   35:	int k[] = {adventurer, council_room, feast, gardens, mine
        -:   36:		, remodel, smithy, village, baron, great_hall};
        1:   37:	int bonus = 0;
        -:   38:	int actual;
        -:   39:	int expected;
        -:   40:		
        -:   41:	//fills arrays with respective treasure cards
      501:   42:	for (int i = 0; i < MAX_HAND; i++) 
        -:   43:	{
      500:   44:		g.hand[0][i] = adventurer;
        -:   45:	}
        -:   46:
        1:   47:	initializeGame(numPlayers, k, seed, &g);
        1:   48:	g.handCount[0] = 5;
        -:   49:
        1:   50:	printf("Running tests for updateCoins() function\n");
        -:   51:	
        -:   52:	//test hand with 0 coin cards
        1:   53:	printf("Test with 0 coins");	
        6:   54:	for (int i = 0; i < 5; i++)
        -:   55:	{
        5:   56:		g.hand[0][i] = smithy;
        -:   57:	}
        1:   58:	updateCoins(0, &g, bonus);
        1:   59:	expected = 0;
        1:   60:	actual = g.coins;
        1:   61:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   62:	isTrue(expected, actual);
        -:   63:
        -:   64:	//test with 5 coppers
        1:   65:	printf("\nTesting with 5 coppers, no bonus - expect 5\n");
        6:   66:	for (int i = 0; i < 5; i++)
        -:   67:	{
        5:   68:		g.hand[0][i] = copper;
        -:   69:	}
        1:   70:	updateCoins(0, &g, bonus);
        1:   71:	actual = g.coins;
        1:   72:	expected = 5;
        1:   73:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   74:	isTrue(expected, actual);
        -:   75:
        -:   76:	//test with 5 silver
        1:   77:	printf("\nTesting with 5 silvers, no bonus - expect 10\n");
        6:   78:	for (int i = 0; i < 5; i++)
        -:   79:	{
        5:   80:		g.hand[0][i] = silver;
        -:   81:	}
        1:   82:	updateCoins(0, &g, bonus);
        1:   83:	actual = g.coins;
        1:   84:	expected = 10;
        1:   85:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   86:	isTrue(expected, actual);
        -:   87:
        -:   88:	//test with 5 golds
        1:   89:	printf("\nTesting with 5 golds, no bonus - expect 15\n");
        6:   90:	for (int i = 0; i < 5; i++)
        -:   91:	{
        5:   92:		g.hand[0][i] = gold;
        -:   93:	}
        1:   94:	updateCoins(0, &g, bonus);
        1:   95:	actual = g.coins;
        1:   96:	expected = 15;
        1:   97:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   98:	isTrue(expected, actual);
        -:   99:
        -:  100:	//test bonus
        1:  101:	printf("\nTesting 5 golds, +5 bonus - expect 20\n");
        1:  102:	bonus = 5;
        1:  103:	updateCoins(0, &g, bonus);
        1:  104:	actual = g.coins;
        1:  105:	expected = 20;
        1:  106:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  107:	isTrue(expected, actual);
        -:  108:
        1:  109:	if (failCount > 0)
        -:  110:	{
    #####:  111:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:  112:		printf("Number of tests failed: %d\n", failCount);
        -:  113:	}
        -:  114:	else
        -:  115:	{
        1:  116:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  117:	}
        -:  118:
        1:  119:	return 0;
        -:  120:}
File 'dominion.c'
Lines executed:16.13% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        5:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        5:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        5:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        5:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  582:		state->deckCount[player]--;
        5:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        5:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
    #####:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
    #####:  813:	int currentPlayer = whoseTurn(state);
    #####:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
    #####:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
    #####:  820:	int z = 0;// this is the counter for the temp hand
    #####:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
    #####:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
    #####: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
    #####: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
    #####: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
    #####: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
    #####: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
    #####: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
    #####: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
    #####: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
    #####: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
        6: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        6: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
       36: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
       30: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        9: 1487:			state->coins += 1;
        -: 1488:		}
       21: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
        5: 1491:			state->coins += 2;
        -: 1492:		}
       16: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
       10: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        6: 1500:	state->coins += bonus;
        -: 1501:
        6: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR unittest3.c:
Running tests for isGameOver() function

Testing province and supply piles not empty - expect return 0
TEST PASSED

Testing province pile is empty - expect return 1
TEST PASSED

Testing 3 empty supply piles - expect return 1
Expected: 1	Actual: 1
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
File 'unittest3.c'
Lines executed:90.91% of 33
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	tests isGameOver()
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
        3:   17:void isTrue(int a, int b) 
        -:   18:{
        3:   19:	if (a == b) 
        -:   20:	{
        3:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
        -:   26:	}
        3:   27:}
        -:   28:
        1:   29:int main(int argc, char** argv) 
        -:   30:{
        -:   31:	struct gameState g;
        -:   32:	int i;
        1:   33:	int numSupplyPiles = 25;
        -:   34:	int actual;
        -:   35:	int expected;
        -:   36:
        -:   37:	/* initialize supply piles with one card */
       26:   38:	for (i = 0; i < numSupplyPiles; i++)
        -:   39:	{
       25:   40:		g.supplyCount[i] = 1;
        -:   41:	}
        -:   42:
        1:   43:	printf("Running tests for isGameOver() function\n");
        -:   44:
        -:   45:	//test with supply piles and provinces still having at least 1 card - game should not end
        1:   46:	printf("\nTesting province and supply piles not empty - expect return 0\n");
        1:   47:	expected = 0;
        1:   48:	actual = isGameOver(&g);
        1:   49:	isTrue(actual, expected);
        -:   50:	
        -:   51:	//test with empty stack of province cards - game should end
        1:   52:	printf("\nTesting province pile is empty - expect return 1\n");
        1:   53:	expected = 1;
        1:   54:	g.supplyCount[province] = 0;
        1:   55:	actual = isGameOver(&g);
        1:   56:	isTrue(actual, expected);
        -:   57:	
        -:   58:	//test with 3 empty supply piles - game should end
        1:   59:	printf("\nTesting 3 empty supply piles - expect return 1\n");
        1:   60:	expected = 1;
        1:   61:	g.supplyCount[province] = 1;
        1:   62:	g.supplyCount[adventurer] = 0;
        1:   63:	g.supplyCount[smithy] = 0;
        1:   64:	g.supplyCount[mine] = 0;
        1:   65:	actual = isGameOver(&g);
        1:   66:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   67:	isTrue(actual, expected);
        -:   68:	
        1:   69:	if (failCount > 0)
        -:   70:	{
    #####:   71:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:   72:		printf("Number of tests failed: %d\n", failCount);
        -:   73:	}
        -:   74:	else
        -:   75:	{
        1:   76:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:   77:	}
        1:   78:	return 0;
        -:   79:}
File 'dominion.c'
Lines executed:1.77% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
    #####:   10:int compare(const void* a, const void* b) {
    #####:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
    #####:   13:	if (*(int*)a < *(int*)b)
    #####:   14:		return -1;
    #####:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
    #####:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
    #####:   46:	SelectStream(1);
    #####:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
    #####:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
    #####:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
    #####:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
    #####:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
    #####:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
    #####:   75:	if (numPlayers == 2)
        -:   76:	{
    #####:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
    #####:   89:	if (numPlayers == 2)
        -:   90:	{
    #####:   91:		state->supplyCount[estate] = 8;
    #####:   92:		state->supplyCount[duchy] = 8;
    #####:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
    #####:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:	state->supplyCount[silver] = 40;
    #####:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
    #####:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
    #####:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
    #####:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
    #####:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
    #####:  117:					if (numPlayers == 2) {
    #####:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
    #####:  124:					state->supplyCount[i] = 10;
        -:  125:				}
    #####:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
    #####:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
    #####:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
    #####:  142:		state->deckCount[i] = 0;
    #####:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
    #####:  145:			state->deck[i][j] = estate;
    #####:  146:			state->deckCount[i]++;
        -:  147:		}
    #####:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
    #####:  150:			state->deck[i][j] = copper;
    #####:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
    #####:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
    #####:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
    #####:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
    #####:  168:		state->handCount[i] = 0;
    #####:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
    #####:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
    #####:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
    #####:  184:	state->outpostPlayed = 0;
    #####:  185:	state->phase = 0;
    #####:  186:	state->numActions = 1;
    #####:  187:	state->numBuys = 1;
    #####:  188:	state->playedCardCount = 0;
    #####:  189:	state->whoseTurn = 0;
    #####:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  194:	for (it = 0; it < 5; it++) {
    #####:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
    #####:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:	return 0;
        -:  201:}
        -:  202:
    #####:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
    #####:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
    #####:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
    #####:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    #####:  216:	while (state->deckCount[player] > 0) {
    #####:  217:		card = floor(Random() * state->deckCount[player]);
    #####:  218:		newDeck[newDeckPos] = state->deck[player][card];
    #####:  219:		newDeckPos++;
    #####:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
    #####:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
    #####:  223:		state->deckCount[player]--;
        -:  224:	}
    #####:  225:	for (i = 0; i < newDeckPos; i++) {
    #####:  226:		state->deck[player][i] = newDeck[i];
    #####:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
    #####:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
        3:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
        3:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
        1:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
        2:  406:	j = 0;
       52:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
       50:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
        3:  411:			j++;
        -:  412:		}
        -:  413:	}
        2:  414:	if (j >= 3)
        -:  415:	{
        1:  416:		return 1;
        -:  417:	}
        -:  418:
        1:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
    #####:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
    #####:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
    #####:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
    #####:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  582:		state->deckCount[player]--;
    #####:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
    #####:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
    #####:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
    #####:  813:	int currentPlayer = whoseTurn(state);
    #####:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
    #####:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
    #####:  820:	int z = 0;// this is the counter for the temp hand
    #####:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
    #####:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
    #####: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
    #####: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
    #####: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
    #####: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
    #####: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
    #####: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
    #####: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
    #####: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
    #####: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
    #####: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
    #####: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
    #####: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
    #####: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
    #####: 1487:			state->coins += 1;
        -: 1488:		}
    #####: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
    #####: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
    #####: 1500:	state->coins += bonus;
        -: 1501:
    #####: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR unittest4.c:
Running tests for getCost() function

Testing card# 0
Expected: 0	Actual: 0
TEST PASSED

Testing card# 1
Expected: 2	Actual: 2
TEST PASSED

Testing card# 2
Expected: 5	Actual: 5
TEST PASSED

Testing card# 3
Expected: 8	Actual: 8
TEST PASSED

Testing card# 4
Expected: 0	Actual: 0
TEST PASSED

Testing card# 5
Expected: 3	Actual: 3
TEST PASSED

Testing card# 6
Expected: 6	Actual: 6
TEST PASSED

Testing card# 7
Expected: 6	Actual: 6
TEST PASSED

Testing card# 8
Expected: 5	Actual: 5
TEST PASSED

Testing card# 9
Expected: 4	Actual: 4
TEST PASSED

Testing card# 10
Expected: 4	Actual: 4
TEST PASSED

Testing card# 11
Expected: 5	Actual: 5
TEST PASSED

Testing card# 12
Expected: 4	Actual: 4
TEST PASSED

Testing card# 13
Expected: 4	Actual: 4
TEST PASSED

Testing card# 14
Expected: 3	Actual: 3
TEST PASSED

Testing card# 15
Expected: 4	Actual: 4
TEST PASSED

Testing card# 16
Expected: 3	Actual: 3
TEST PASSED

Testing card# 17
Expected: 5	Actual: 5
TEST PASSED

Testing card# 18
Expected: 3	Actual: 3
TEST PASSED

Testing card# 19
Expected: 5	Actual: 5
TEST PASSED

Testing card# 20
Expected: 3	Actual: 3
TEST PASSED

Testing card# 21
Expected: 4	Actual: 4
TEST PASSED

Testing card# 22
Expected: 2	Actual: 2
TEST PASSED

Testing card# 23
Expected: 5	Actual: 5
TEST PASSED

Testing card# 24
Expected: 4	Actual: 4
TEST PASSED

Testing card# 25
Expected: 4	Actual: 4
TEST PASSED

Testing card# 26
Expected: 4	Actual: 4
TEST PASSED

Testing invalid card
Expected: -1	Actual: -1
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
File 'unittest4.c'
Lines executed:84.00% of 25
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests getCost() function
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
       28:   17:void isTrue(int a, int b) 
        -:   18:{
       28:   19:	if (a == b) 
        -:   20:	{
       28:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
    #####:   26:		failCount++;
        -:   27:	}
       28:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv) {
        -:   31:
        -:   32:	//card costs in order: curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map
        1:   33:	int cardCost[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   34:	int expected;
        -:   35:	int	actual;
        -:   36:	
        1:   37:	printf("Running tests for getCost() function\n");
        -:   38:
        -:   39:	//tests getCost for all cards present
       28:   40:	for (int i = 0; i < 27; i++) 
        -:   41:	{
       27:   42:		printf("\nTesting card# %d\n", i);
       27:   43:		actual = getCost(i);
       27:   44:		expected = cardCost[i];		
       27:   45:		printf("Expected: %d	Actual: %d\n", expected, actual);
       27:   46:		isTrue(expected, actual);
        -:   47:	}
        -:   48:
        -:   49:
        -:   50:	//test with non-existent card - should return -1
        1:   51:	printf("\nTesting invalid card\n");
        1:   52:	actual = getCost(28);
        1:   53:	expected = -1;
        1:   54:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   55:	isTrue(expected, actual);
        -:   56:
        1:   57:	if (failCount > 0)
        -:   58:	{
    #####:   59:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:   60:		printf("Number of tests failed: %d\n", failCount);
        -:   61:	}
        -:   62:	else
        -:   63:	{
        1:   64:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:   65:	}
        -:   66:
        1:   67:	return 0;
        -:   68:}
File 'dominion.c'
Lines executed:5.32% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
    #####:   10:int compare(const void* a, const void* b) {
    #####:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
    #####:   13:	if (*(int*)a < *(int*)b)
    #####:   14:		return -1;
    #####:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
    #####:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
    #####:   46:	SelectStream(1);
    #####:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
    #####:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
    #####:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
    #####:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
    #####:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
    #####:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
    #####:   75:	if (numPlayers == 2)
        -:   76:	{
    #####:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
    #####:   89:	if (numPlayers == 2)
        -:   90:	{
    #####:   91:		state->supplyCount[estate] = 8;
    #####:   92:		state->supplyCount[duchy] = 8;
    #####:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
    #####:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:	state->supplyCount[silver] = 40;
    #####:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
    #####:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
    #####:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
    #####:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
    #####:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
    #####:  117:					if (numPlayers == 2) {
    #####:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
    #####:  124:					state->supplyCount[i] = 10;
        -:  125:				}
    #####:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
    #####:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
    #####:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
    #####:  142:		state->deckCount[i] = 0;
    #####:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
    #####:  145:			state->deck[i][j] = estate;
    #####:  146:			state->deckCount[i]++;
        -:  147:		}
    #####:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
    #####:  150:			state->deck[i][j] = copper;
    #####:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
    #####:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
    #####:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
    #####:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
    #####:  168:		state->handCount[i] = 0;
    #####:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
    #####:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
    #####:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
    #####:  184:	state->outpostPlayed = 0;
    #####:  185:	state->phase = 0;
    #####:  186:	state->numActions = 1;
    #####:  187:	state->numBuys = 1;
    #####:  188:	state->playedCardCount = 0;
    #####:  189:	state->whoseTurn = 0;
    #####:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  194:	for (it = 0; it < 5; it++) {
    #####:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
    #####:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:	return 0;
        -:  201:}
        -:  202:
    #####:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
    #####:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
    #####:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
    #####:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    #####:  216:	while (state->deckCount[player] > 0) {
    #####:  217:		card = floor(Random() * state->deckCount[player]);
    #####:  218:		newDeck[newDeckPos] = state->deck[player][card];
    #####:  219:		newDeckPos++;
    #####:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
    #####:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
    #####:  223:		state->deckCount[player]--;
        -:  224:	}
    #####:  225:	for (i = 0; i < newDeckPos; i++) {
    #####:  226:		state->deck[player][i] = newDeck[i];
    #####:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
    #####:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
    #####:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
    #####:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
    #####:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
    #####:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  582:		state->deckCount[player]--;
    #####:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
    #####:  586:	return 0;
        -:  587:}
        -:  588:
       28:  589:int getCost(int cardNumber)
        -:  590:{
       28:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
        1:  594:		return 0;
        -:  595:	case estate:
        1:  596:		return 2;
        -:  597:	case duchy:
        1:  598:		return 5;
        -:  599:	case province:
        1:  600:		return 8;
        -:  601:	case copper:
        1:  602:		return 0;
        -:  603:	case silver:
        1:  604:		return 3;
        -:  605:	case gold:
        1:  606:		return 6;
        -:  607:	case adventurer:
        1:  608:		return 6;
        -:  609:	case council_room:
        1:  610:		return 5;
        -:  611:	case feast:
        1:  612:		return 4;
        -:  613:	case gardens:
        1:  614:		return 4;
        -:  615:	case mine:
        1:  616:		return 5;
        -:  617:	case remodel:
        1:  618:		return 4;
        -:  619:	case smithy:
        1:  620:		return 4;
        -:  621:	case village:
        1:  622:		return 3;
        -:  623:	case baron:
        1:  624:		return 4;
        -:  625:	case great_hall:
        1:  626:		return 3;
        -:  627:	case minion:
        1:  628:		return 5;
        -:  629:	case steward:
        1:  630:		return 3;
        -:  631:	case tribute:
        1:  632:		return 5;
        -:  633:	case ambassador:
        1:  634:		return 3;
        -:  635:	case cutpurse:
        1:  636:		return 4;
        -:  637:	case embargo:
        1:  638:		return 2;
        -:  639:	case outpost:
        1:  640:		return 5;
        -:  641:	case salvager:
        1:  642:		return 4;
        -:  643:	case sea_hag:
        1:  644:		return 4;
        -:  645:	case treasure_map:
        1:  646:		return 4;
        -:  647:	}
        -:  648:
        1:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
    #####:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
    #####:  813:	int currentPlayer = whoseTurn(state);
    #####:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
    #####:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
    #####:  820:	int z = 0;// this is the counter for the temp hand
    #####:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
    #####:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
    #####: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
    #####: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
    #####: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
    #####: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
    #####: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
    #####: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
    #####: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
    #####: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
    #####: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
    #####: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
    #####: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
    #####: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
    #####: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
    #####: 1487:			state->coins += 1;
        -: 1488:		}
    #####: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
    #####: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
    #####: 1500:	state->coins += bonus;
        -: 1501:
    #####: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR cardtest1.c:
File 'cardtest1.c'
Lines executed:96.63% of 89
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests adventurer card
        -:    6:*/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:// counter for total number of failures
        -:   15:int failCount = 0;
        -:   16:
        -:   17:// checks if two values are equivalent
       18:   18:void isTrue(int a, int b) 
        -:   19:{
       18:   20:	if (a == b) 
        -:   21:	{
       17:   22:		printf("TEST PASSED\n");
        -:   23:	}
        -:   24:	else 
        -:   25:	{
        1:   26:		printf("TEST FAILED\n");
        1:   27:		failCount++;
        -:   28:	}
       18:   29:}
        -:   30:
        1:   31:int main(int argc, char** argv)
        -:   32:{
        -:   33:	//set arguments for initializeGame and cardEffect
        -:   34:	struct gameState control, test;
        1:   35:	int numPlayers = 2;
        1:   36:	int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   37:	int seed = 1000;
        1:   38:	int k[] = { adventurer, council_room, feast, gardens, mine,
        -:   39:		remodel, smithy, village, baron, great_hall };
        -:   40:	int expected;
        -:   41:	int actual;
        1:   42:	int playerA = 0;
        1:   43:	int playerB = 1;
        -:   44:	
        1:   45:	initializeGame(numPlayers, k, seed, &control);
        -:   46:
        -:   47:	// copy the game state, test will actually be run while control will be manually modified to represent the expected values
        1:   48:	test = control;
        -:   49:
        1:   50:	printf("Running tests for adventurer card\n");
        -:   51:
        1:   52:	cardEffect(adventurer, choice1, choice2, choice3, &test, handPos, &bonus);
        -:   53:
        -:   54:	//test hand count
        1:   55:	printf("\nTest hand count for player A\n");
        1:   56:	expected = control.handCount[playerA] + 1; //2 cards gained, 1 card played
        1:   57:	actual = test.handCount[playerA];
        1:   58:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   59:	isTrue(expected, actual);
        -:   60:
        -:   61:	//test deck count
        1:   62:	printf("\nTest deck count has decreased by at least 2\n");
        1:   63:	expected = control.deckCount[playerA] - 2;
        1:   64:	actual = test.deckCount[playerA];
        1:   65:	printf("Expected <= %d	Actual <= %d\n", expected, actual);
        1:   66:	if (actual <= expected) 
        -:   67:	{
        1:   68:		printf("TEST PASSED\n");
        -:   69:	}
        -:   70:	else 
        -:   71:	{
    #####:   72:		printf("TEST FAILED\n");
    #####:   73:		failCount++;
        -:   74:	}
        -:   75:
        -:   76:	//test number of treasure cards in hand
        1:   77:	printf("\nTesting that 2 treasure cards were drawn\n");
        -:   78:	int tcard;
        1:   79:	int testTreasure = 0;
        1:   80:	int controlTreasure = 0;
        -:   81:
        -:   82:	//count treasure cards in original hand
        6:   83:	for (int i = 0; i < control.handCount[playerA]; i++)
        -:   84:	{
        5:   85:		tcard = control.hand[playerA][i];
        5:   86:		if (tcard == copper || tcard == silver || tcard == gold) 
        -:   87:		{
        4:   88:			controlTreasure++;
        -:   89:		}
        -:   90:	}
        1:   91:	expected = controlTreasure + 2;
        -:   92:	//count treasure cards in new hand
        8:   93:	for (int i = 0; i < test.handCount[playerA]; i++)
        -:   94:	{
        7:   95:		tcard = test.hand[playerA][i];
        7:   96:		if (tcard == copper || tcard == silver || tcard == gold) 
        -:   97:		{
        6:   98:			testTreasure++;
        -:   99:		}
        -:  100:	}
        1:  101:	actual = testTreasure;
        1:  102:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  103:	isTrue(expected, actual);
        -:  104:
        -:  105:	//Tests to ensure victory cards are unchanged
        1:  106:	printf("\nTesting that victory card piles remain unchanged\n");
        1:  107:	printf("\nTesting province\n");
        1:  108:	actual = test.supplyCount[province];
        1:  109:	expected = control.supplyCount[province];
        1:  110:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  111:	isTrue(expected, actual);
        -:  112:
        1:  113:	printf("\nTesting duchy\n");
        1:  114:	actual = test.supplyCount[duchy];
        1:  115:	expected = control.supplyCount[duchy];
        1:  116:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  117:	isTrue(expected, actual);
        -:  118:
        1:  119:	printf("\nTesting estate\n");
        1:  120:	actual = test.supplyCount[duchy];
        1:  121:	expected = control.supplyCount[duchy];
        1:  122:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  123:	isTrue(expected, actual);
        -:  124:
        -:  125:	//Tests to ensure kingdom cards are unchanged
        1:  126:	printf("\nTesting that kingdom card piles remain unchanged\n");
       11:  127:	for (int i = 0; i < 10; i++)
        -:  128:	{
       10:  129:		printf("\nTesting pile# %d\n", i);
       10:  130:		actual = test.supplyCount[k[i]];
       10:  131:		expected = control.supplyCount[k[i]];
       10:  132:		printf("Expected: %d	Actual: %d\n", expected, actual);
       10:  133:		isTrue(expected, actual);
        -:  134:	}
        -:  135:
        -:  136:	//Tests to ensure other player is not affected
        1:  137:	printf("\nTesting that there was no effect on playerB\n");
        1:  138:	printf("\nTesting playerB's hand count\n");
        1:  139:	actual = test.handCount[playerB];
        1:  140:	expected = control.handCount[playerB];
        1:  141:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  142:	isTrue(expected, actual);
        -:  143:
        1:  144:	printf("\nTesting playerB's deck count\n");
        1:  145:	actual = test.deckCount[playerB];
        1:  146:	expected = control.deckCount[playerB];
        1:  147:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  148:	isTrue(expected, actual);
        -:  149:
        1:  150:	printf("\nTesting playerB's discard count\n");
        1:  151:	actual = test.discardCount[playerB];
        1:  152:	expected = control.discardCount[playerB];
        1:  153:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  154:	isTrue(expected, actual);
        -:  155:
        1:  156:	if (failCount > 0)
        -:  157:	{
        1:  158:		printf("\nFINAL RESULT: TEST FAILED\n");
        1:  159:		printf("Number of tests failed: %d\n", failCount);
        -:  160:	}
        -:  161:	else
        -:  162:	{
    #####:  163:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  164:	}
        -:  165:
        -:  166:
        1:  167:	return 0;
        -:  168:}
File 'dominion.c'
Lines executed:19.50% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
        1:  351:int whoseTurn(struct gameState *state) {
        1:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        7:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        7:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        7:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        7:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  582:		state->deckCount[player]--;
        7:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        7:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
        1:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
        1:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
        4:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
        2:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
        2:  685:		drawCard(currentPlayer, state);
        2:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        2:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
        2:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        1:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
        1:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
        1:  813:	int currentPlayer = whoseTurn(state);
        1:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
        1:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
        1:  820:	int z = 0;// this is the counter for the temp hand
        1:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
        1:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
        1:  833:		adventurerCard(state, currentPlayer, temphand, z);
        1:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
    #####: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
    #####: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
    #####: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
    #####: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
    #####: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
    #####: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
    #####: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
    #####: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
    #####: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
        1: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        1: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
        6: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
        5: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        4: 1487:			state->coins += 1;
        -: 1488:		}
        1: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
        1: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        1: 1500:	state->coins += bonus;
        -: 1501:
        1: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR cardtest2.c:
Running tests for smithy card

Test hand count for player A
Expected: 7	Actual: 8
TEST FAILED

Test deck count for player A
Expected: 2	Actual: 1
TEST FAILED

Testing that victory card piles remain unchanged

Testing province
Expected: 8	Actual: 8
TEST PASSED

Testing duchy
Expected: 8	Actual: 8
TEST PASSED

Testing estate
Expected: 8	Actual: 8
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 1
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 2
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 3
Expected: 8	Actual: 8
TEST PASSED

Testing pile# 4
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 5
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 6
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 7
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 8
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 9
Expected: 8	Actual: 8
TEST PASSED

Testing that there was no effect on playerB
Testing playerB's hand count
Expected: 0	Actual: 0
TEST PASSED

Testing playerB's deck count
Expected: 10	Actual: 10
TEST PASSED

Testing playerB's discard count
Expected: 0	Actual: 0
TEST PASSED

FINAL RESULT: TEST FAILED
Number of tests failed: 2
File 'cardtest2.c'
Lines executed:98.59% of 71
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3	
        -:    5:	Tests smithy card
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:
        -:   14:// counter for total number of failures
        -:   15:int failCount = 0;
        -:   16:
        -:   17:// checks if two values are equivalent
       18:   18:void isTrue(int a, int b) 
        -:   19:{
       18:   20:	if (a == b) 
        -:   21:	{
       16:   22:		printf("TEST PASSED\n");
        -:   23:	}
        -:   24:	else 
        -:   25:	{
        2:   26:		printf("TEST FAILED\n");
        2:   27:		failCount++;
        -:   28:	}
       18:   29:}
        -:   30:
        -:   31:
        1:   32:int main(int argc, char** argv) 
        -:   33:{
        -:   34:	//set arguments for initializeGame and cardEffect
        -:   35:	struct gameState control, test;
        1:   36:	int numPlayers = 2;
        1:   37:	int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   38:	int seed = 1000;
        1:   39:	int k[] = { adventurer, council_room, feast, gardens, mine,
        -:   40:		remodel, smithy, village, baron, great_hall };
        -:   41:	int expected;
        -:   42:	int actual;
        1:   43:	int playerA = 0;
        1:   44:	int playerB = 1;
        -:   45:
        1:   46:	initializeGame(numPlayers, k, seed, &control);
        -:   47:
        -:   48:	// copy the game state, test will actually be run while control will be manually modified to represent the expected values
        1:   49:	test = control;
        -:   50:
        1:   51:	printf("Running tests for smithy card\n");
        -:   52:
        1:   53:		cardEffect(smithy, choice1, choice2, choice3, &test, handPos, &bonus);
        -:   54:
        -:   55:		//test hand count
        1:   56:		printf("\nTest hand count for player A\n");
        1:   57:		expected = control.handCount[playerA] + 2; //3 cards drawn, 1 card played
        1:   58:		actual = test.handCount[playerA];
        1:   59:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   60:		isTrue(expected, actual);
        -:   61:
        -:   62:		//test deck count
        1:   63:		printf("\nTest deck count for player A\n");
        1:   64:		expected = control.deckCount[playerA] - 3;
        1:   65:		actual = test.deckCount[playerA];
        1:   66:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   67:		isTrue(expected, actual);
        -:   68:
        -:   69:		//Tests to ensure victory cards are unchanged
        1:   70:		printf("\nTesting that victory card piles remain unchanged\n");
        1:   71:		printf("\nTesting province\n");
        1:   72:		actual = test.supplyCount[province];
        1:   73:		expected = control.supplyCount[province];
        1:   74:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   75:		isTrue(expected, actual);
        -:   76:
        1:   77:		printf("\nTesting duchy\n");
        1:   78:		actual = test.supplyCount[duchy];
        1:   79:		expected = control.supplyCount[duchy];
        1:   80:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   81:		isTrue(expected, actual);
        -:   82:
        1:   83:		printf("\nTesting estate\n");
        1:   84:		actual = test.supplyCount[duchy];
        1:   85:		expected = control.supplyCount[duchy];
        1:   86:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   87:		isTrue(expected, actual);
        -:   88:
        -:   89:		//Tests to ensure kingdom cards are unchanged
        1:   90:		printf("\nTesting that kingdom card piles remain unchanged\n");
       11:   91:		for (int i = 0; i < 10; i++)
        -:   92:		{
       10:   93:			printf("\nTesting pile# %d\n", i);
       10:   94:			actual = test.supplyCount[k[i]];
       10:   95:			expected = control.supplyCount[k[i]];
       10:   96:			printf("Expected: %d	Actual: %d\n", expected, actual);
       10:   97:			isTrue(expected, actual);
        -:   98:		}
        -:   99:
        -:  100:		//Tests to ensure other player is not affected
        1:  101:		printf("\nTesting that there was no effect on playerB\n");
        1:  102:		printf("Testing playerB's hand count\n");
        1:  103:		actual = test.handCount[playerB];
        1:  104:		expected = control.handCount[playerB];
        1:  105:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  106:		isTrue(expected, actual);
        -:  107:
        1:  108:		printf("\nTesting playerB's deck count\n");
        1:  109:		actual = test.deckCount[playerB];
        1:  110:		expected = control.deckCount[playerB];
        1:  111:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  112:		isTrue(expected, actual);
        -:  113:
        1:  114:		printf("\nTesting playerB's discard count\n");
        1:  115:		actual = test.discardCount[playerB];
        1:  116:		expected = control.discardCount[playerB];
        1:  117:		printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  118:		isTrue(expected, actual);
        -:  119:
        1:  120:		if (failCount > 0)
        -:  121:		{
        1:  122:			printf("\nFINAL RESULT: TEST FAILED\n");
        1:  123:			printf("Number of tests failed: %d\n", failCount);
        -:  124:		}
        -:  125:		else
        -:  126:		{
    #####:  127:			printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  128:		}
        -:  129:	
        -:  130:
        1:  131:	return 0;
        -:  132:}
        -:  133:
File 'dominion.c'
Lines executed:20.57% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
        1:  351:int whoseTurn(struct gameState *state) {
        1:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        9:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        9:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        9:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        9:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        9:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        9:  582:		state->deckCount[player]--;
        9:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        9:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
        1:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
        5:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
        4:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
        1:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
        1:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
        1:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
        1:  813:	int currentPlayer = whoseTurn(state);
        1:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
        1:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
        1:  820:	int z = 0;// this is the counter for the temp hand
        1:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
        1:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
        1:  999:		smithyCard(state, currentPlayer, handPos);
        1: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
        1: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
        1: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
        1: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
        1: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
        1: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
        1: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
        1: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
        1: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
        1: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
        1: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
        1: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        1: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
        6: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
        5: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        4: 1487:			state->coins += 1;
        -: 1488:		}
        1: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
        1: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        1: 1500:	state->coins += bonus;
        -: 1501:
        1: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR cardtest3.c:
Running tests for outpost card

Test hand count for player A
Expected: 4	Actual: 4
TEST PASSED

Test deck count for player A
Expected: 5	Actual: 5
TEST PASSED

Testing that outpost flag is set
Expected: 1	Actual: 1
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 8	Actual: 8
TEST PASSED

Testing duchy
Expected: 8	Actual: 8
TEST PASSED

Testing estate
Expected: 8	Actual: 8
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 1
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 2
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 3
Expected: 8	Actual: 8
TEST PASSED

Testing pile# 4
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 5
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 6
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 7
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 8
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 9
Expected: 8	Actual: 8
TEST PASSED

Testing that there was no effect on playerB

Testing playerB's hand count
Expected: 0	Actual: 0
TEST PASSED

Testing playerB's deck count
Expected: 10	Actual: 10
TEST PASSED

Testing playerB's discard count
Expected: 0	Actual: 0
TEST PASSED

FINAL RESULT: ALL TESTS PASSED
File 'cardtest3.c'
Lines executed:94.74% of 76
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests outpost card
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
       19:   17:void isTrue(int a, int b)
        -:   18:{
       19:   19:	if (a == b)
        -:   20:	{
       19:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else
        -:   24:	{
    #####:   25:		printf("TEST FAILED\n");
    #####:   26:		failCount++;
        -:   27:	}
       19:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv)
        -:   31:{
        -:   32:	//set arguments for initializeGame and cardEffect
        -:   33:	struct gameState control, test;
        1:   34:	int numPlayers = 2;
        1:   35:	int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   36:	int seed = 1000;
        1:   37:	int k[] = { adventurer, council_room, feast, gardens, mine,
        -:   38:		outpost, smithy, village, baron, great_hall };
        -:   39:	int expected;
        -:   40:	int actual;
        1:   41:	int playerA = 0;
        1:   42:	int playerB = 1;
        -:   43:
        1:   44:	initializeGame(numPlayers, k, seed, &control);
        -:   45:
        -:   46:	// copy the game state, test will actually be run while control will be manually modified to represent the expected values
        1:   47:	test = control;
        -:   48:
        1:   49:	printf("Running tests for outpost card\n");
        -:   50:
        1:   51:	cardEffect(outpost, choice1, choice2, choice3, &test, handPos, &bonus);
        -:   52:
        -:   53:	//test hand count
        1:   54:	printf("\nTest hand count for player A\n");
        1:   55:	expected = control.handCount[playerA] - 1; //0 cards gained, 1 card played
        1:   56:	actual = test.handCount[playerA];
        1:   57:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   58:	isTrue(expected, actual);
        -:   59:
        -:   60:	//test deck count
        1:   61:	printf("\nTest deck count for player A\n"); //deck remains unchanged
        1:   62:	expected = control.deckCount[playerA];
        1:   63:	actual = test.deckCount[playerA];
        1:   64:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   65:	isTrue(expected, actual);
        -:   66:
        -:   67:	//test outpost flag
        -:   68:	//expected to fail due to introduced bug
        1:   69:	printf("\nTesting that outpost flag is set\n");
        1:   70:	expected = control.outpostPlayed + 1;
        1:   71:	actual = test.outpostPlayed;
        1:   72:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   73:	isTrue(expected, actual);
        -:   74:
        -:   75:	//Tests to ensure victory cards are unchanged
        1:   76:	printf("\nTesting that victory card piles remain unchanged\n");
        1:   77:	printf("\nTesting province\n");
        1:   78:	actual = test.supplyCount[province];
        1:   79:	expected = control.supplyCount[province];
        1:   80:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   81:	isTrue(expected, actual);
        -:   82:
        1:   83:	printf("\nTesting duchy\n");
        1:   84:	actual = test.supplyCount[duchy];
        1:   85:	expected = control.supplyCount[duchy];
        1:   86:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   87:	isTrue(expected, actual);
        -:   88:
        1:   89:	printf("\nTesting estate\n");
        1:   90:	actual = test.supplyCount[duchy];
        1:   91:	expected = control.supplyCount[duchy];
        1:   92:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   93:	isTrue(expected, actual);
        -:   94:
        -:   95:	//Tests to ensure kingdom cards are unchanged
        1:   96:	printf("\nTesting that kingdom card piles remain unchanged\n");
       11:   97:	for (int i = 0; i < 10; i++)
        -:   98:	{
       10:   99:		printf("\nTesting pile# %d\n", i);
       10:  100:		actual = test.supplyCount[k[i]];
       10:  101:		expected = control.supplyCount[k[i]];
       10:  102:		printf("Expected: %d	Actual: %d\n", expected, actual);
       10:  103:		isTrue(expected, actual);
        -:  104:	}
        -:  105:
        -:  106:	//Tests to ensure other player is not affected
        1:  107:	printf("\nTesting that there was no effect on playerB\n");
        1:  108:	printf("\nTesting playerB's hand count\n");
        1:  109:	actual = test.handCount[playerB];
        1:  110:	expected = control.handCount[playerB];
        1:  111:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  112:	isTrue(expected, actual);
        -:  113:
        1:  114:	printf("\nTesting playerB's deck count\n");
        1:  115:	actual = test.deckCount[playerB];
        1:  116:	expected = control.deckCount[playerB];
        1:  117:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  118:	isTrue(expected, actual);
        -:  119:
        1:  120:	printf("\nTesting playerB's discard count\n");
        1:  121:	actual = test.discardCount[playerB];
        1:  122:	expected = control.discardCount[playerB];
        1:  123:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  124:	isTrue(expected, actual);
        -:  125:
        1:  126:	if (failCount > 0)
        -:  127:	{
    #####:  128:		printf("\nFINAL RESULT: TEST FAILED\n");
    #####:  129:		printf("Number of tests failed: %d\n", failCount);
        -:  130:	}
        -:  131:	else
        -:  132:	{
        1:  133:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  134:	}
        -:  135:
        -:  136:
        1:  137:	return 0;
        -:  138:}
File 'dominion.c'
Lines executed:19.86% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
        1:  351:int whoseTurn(struct gameState *state) {
        1:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        5:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        5:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        5:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        5:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  582:		state->deckCount[player]--;
        5:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        5:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
    #####:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
    #####:  757:	drawCard(currentPlayer, state);
    #####:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
    #####:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
    #####:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
        1:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
        1:  813:	int currentPlayer = whoseTurn(state);
        1:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
        1:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
        1:  820:	int z = 0;// this is the counter for the temp hand
        1:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
        1:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
    #####: 1079:		greatHallCard(state, currentPlayer, handPos);
    #####: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
        1: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
        1: 1337:		discardCard(handPos, currentPlayer, state, 0);
        1: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
        1: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
        1: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
        1: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
        1: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
        1: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
        1: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
        1: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
        1: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
        1: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
        1: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
        1: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        1: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
        6: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
        5: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        4: 1487:			state->coins += 1;
        -: 1488:		}
        1: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
        1: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        1: 1500:	state->coins += bonus;
        -: 1501:
        1: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
TEST RESULTS FOR cardtest4.c:
Running tests for great hall card

Testing hand count
Expected: 5	Actual: 6
TEST FAILED

Testing deck count
Expected: 4	Actual: 3
TEST FAILED

Testing that action count increases
Expected: 2	Actual: 2
TEST PASSED

Testing that victory card piles remain unchanged

Testing province
Expected: 8	Actual: 8
TEST PASSED

Testing duchy
Expected: 8	Actual: 8
TEST PASSED

Testing estate
Expected: 8	Actual: 8
TEST PASSED

Testing that kingdom card piles remain unchanged

Testing pile# 0
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 1
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 2
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 3
Expected: 8	Actual: 8
TEST PASSED

Testing pile# 4
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 5
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 6
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 7
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 8
Expected: 10	Actual: 10
TEST PASSED

Testing pile# 9
Expected: 8	Actual: 8
TEST PASSED

Testing that there was no effect on playerB

Testing playerB's hand count
Expected: 0	Actual: 0
TEST PASSED

Testing playerB's deck count
Expected: 10	Actual: 10
TEST PASSED

Testing playerB's discard count
Expected: 0	Actual: 0
TEST PASSED

FINAL RESULT: TEST FAILED
Number of tests failed: 2
File 'cardtest4.c'
Lines executed:98.68% of 76
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Christian Roccanova
        -:    3:	CS362-400
        -:    4:	Assignment 3
        -:    5:	Tests great hall card
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:// counter for total number of failures
        -:   14:int failCount = 0;
        -:   15:
        -:   16:// checks if two values are equivalent
       19:   17:void isTrue(int a, int b) 
        -:   18:{
       19:   19:	if (a == b) 
        -:   20:	{
       17:   21:		printf("TEST PASSED\n");
        -:   22:	}
        -:   23:	else 
        -:   24:	{
        2:   25:		printf("TEST FAILED\n");
        2:   26:		failCount++;
        -:   27:	}
       19:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv)
        -:   31:{
        -:   32:	//set arguments for initializeGame and cardEffect
        -:   33:	struct gameState control, test;
        1:   34:	int numPlayers = 2;
        1:   35:	int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   36:	int seed = 1000;
        1:   37:	int k[] = { adventurer, council_room, feast, gardens, mine,
        -:   38:		outpost, smithy, village, baron, great_hall };
        -:   39:	int expected;
        -:   40:	int actual;
        1:   41:	int playerA = 0;
        1:   42:	int playerB = 1;
        -:   43:
        1:   44:	initializeGame(numPlayers, k, seed, &control);
        -:   45:
        -:   46:	// copy the game state, test will actually be run while control will be manually modified to represent the expected values
        1:   47:	test = control;
        -:   48:
        1:   49:	printf("Running tests for great hall card\n");
        -:   50:
        1:   51:	cardEffect(great_hall, choice1, choice2, choice3, &test, handPos, &bonus);
        -:   52:
        -:   53:	//test hand count
        1:   54:	printf("\nTesting hand count\n");
        1:   55:	expected = control.handCount[playerA]; //1 cards gained, 1 card played
        1:   56:	actual = test.handCount[playerA];
        1:   57:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   58:	isTrue(expected, actual);
        -:   59:
        -:   60:	//test deck count
        1:   61:	printf("\nTesting deck count\n"); //deck decreases by 1
        1:   62:	expected = control.deckCount[playerA] - 1;
        1:   63:	actual = test.deckCount[playerA];
        1:   64:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   65:	isTrue(expected, actual);
        -:   66:
        -:   67:	//test action count
        1:   68:	printf("\nTesting that action count increases\n");
        1:   69:	expected = control.numActions + 1; //1 bonus action gained
        1:   70:	actual = test.numActions;
        1:   71:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   72:	isTrue(expected, actual);
        -:   73:
        -:   74:	//Tests to ensure victory cards are unchanged
        1:   75:	printf("\nTesting that victory card piles remain unchanged\n");
        1:   76:	printf("\nTesting province\n");
        1:   77:	actual = test.supplyCount[province];
        1:   78:	expected = control.supplyCount[province];
        1:   79:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   80:	isTrue(expected, actual);
        -:   81:
        1:   82:	printf("\nTesting duchy\n");
        1:   83:	actual = test.supplyCount[duchy];
        1:   84:	expected = control.supplyCount[duchy];
        1:   85:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   86:	isTrue(expected, actual);
        -:   87:
        1:   88:	printf("\nTesting estate\n");
        1:   89:	actual = test.supplyCount[duchy];
        1:   90:	expected = control.supplyCount[duchy];
        1:   91:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:   92:	isTrue(expected, actual);
        -:   93:
        -:   94:	//Tests to ensure kingdom cards are unchanged
        1:   95:	printf("\nTesting that kingdom card piles remain unchanged\n");
       11:   96:	for (int i = 0; i < 10; i++) 
        -:   97:	{
       10:   98:		printf("\nTesting pile# %d\n", i);
       10:   99:		actual = test.supplyCount[k[i]];
       10:  100:		expected = control.supplyCount[k[i]];
       10:  101:		printf("Expected: %d	Actual: %d\n", expected, actual);
       10:  102:		isTrue(expected, actual);
        -:  103:	}
        -:  104:
        -:  105:	//Tests to ensure other player is not affected
        1:  106:	printf("\nTesting that there was no effect on playerB\n");
        1:  107:	printf("\nTesting playerB's hand count\n");
        1:  108:	actual = test.handCount[playerB];
        1:  109:	expected = control.handCount[playerB];
        1:  110:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  111:	isTrue(expected, actual);
        -:  112:
        1:  113:	printf("\nTesting playerB's deck count\n");
        1:  114:	actual = test.deckCount[playerB];
        1:  115:	expected = control.deckCount[playerB];
        1:  116:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  117:	isTrue(expected, actual);
        -:  118:
        1:  119:	printf("\nTesting playerB's discard count\n");
        1:  120:	actual = test.discardCount[playerB];
        1:  121:	expected = control.discardCount[playerB];
        1:  122:	printf("Expected: %d	Actual: %d\n", expected, actual);
        1:  123:	isTrue(expected, actual);
        -:  124:
        -:  125:
        1:  126:	if (failCount > 0)
        -:  127:	{
        1:  128:		printf("\nFINAL RESULT: TEST FAILED\n");
        1:  129:		printf("Number of tests failed: %d\n", failCount);
        -:  130:	}
        -:  131:	else
        -:  132:	{
    #####:  133:		printf("\nFINAL RESULT: ALL TESTS PASSED\n");
        -:  134:	}
        -:  135:
        -:  136:
        1:  137:	return 0;
        -:  138:}
File 'dominion.c'
Lines executed:20.74% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominion code of teammate Neil Johnson ONID: johnsnei
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:	if (*(int*)a > *(int*)b)
    #####:   12:		return 1;
       30:   13:	if (*(int*)a < *(int*)b)
        8:   14:		return -1;
       22:   15:	return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:	int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:	struct gameState *state) {
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
        1:   46:	SelectStream(1);
        1:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
        1:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
        1:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
       11:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
      110:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
      100:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
        -:   67:		}
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
        1:   75:	if (numPlayers == 2)
        -:   76:	{
        1:   77:		state->supplyCount[curse] = 10;
        -:   78:	}
    #####:   79:	else if (numPlayers == 3)
        -:   80:	{
    #####:   81:		state->supplyCount[curse] = 20;
        -:   82:	}
        -:   83:	else
        -:   84:	{
    #####:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
        1:   89:	if (numPlayers == 2)
        -:   90:	{
        1:   91:		state->supplyCount[estate] = 8;
        1:   92:		state->supplyCount[duchy] = 8;
        1:   93:		state->supplyCount[province] = 8;
        -:   94:	}
        -:   95:	else
        -:   96:	{
    #####:   97:		state->supplyCount[estate] = 12;
    #####:   98:		state->supplyCount[duchy] = 12;
    #####:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
        1:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:	state->supplyCount[silver] = 40;
        1:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
       21:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
      165:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
      155:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
       10:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
        4:  117:					if (numPlayers == 2) {
        2:  118:						state->supplyCount[i] = 8;
        -:  119:					}
    #####:  120:					else { state->supplyCount[i] = 12; }
        -:  121:				}
        -:  122:				else
        -:  123:				{
        8:  124:					state->supplyCount[i] = 10;
        -:  125:				}
       10:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
      145:  130:				state->supplyCount[i] = -1;
        -:  131:			}
        -:  132:		}
        -:  133:
        -:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
        3:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
        2:  142:		state->deckCount[i] = 0;
        8:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
        6:  145:			state->deck[i][j] = estate;
        6:  146:			state->deckCount[i]++;
        -:  147:		}
       16:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
       14:  150:			state->deck[i][j] = copper;
       14:  151:			state->deckCount[i]++;
        -:  152:		}
        -:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
        3:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
        2:  158:		if (shuffle(i, state) < 0)
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:	//draw player hands
        3:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
        2:  168:		state->handCount[i] = 0;
        2:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
        -:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
       28:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
       27:  180:		state->embargoTokens[i] = 0;
        -:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
        1:  184:	state->outpostPlayed = 0;
        1:  185:	state->phase = 0;
        1:  186:	state->numActions = 1;
        1:  187:	state->numBuys = 1;
        1:  188:	state->playedCardCount = 0;
        1:  189:	state->whoseTurn = 0;
        1:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
        6:  194:	for (it = 0; it < 5; it++) {
        5:  195:		drawCard(state->whoseTurn, state);
        -:  196:	}
        -:  197:
        1:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:	return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:	int newDeck[MAX_DECK];
        2:  207:	int newDeckPos = 0;
        -:  208:	int card;
        -:  209:	int i;
        -:  210:
        2:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
        2:  213:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:	while (state->deckCount[player] > 0) {
       20:  217:		card = floor(Random() * state->deckCount[player]);
       20:  218:		newDeck[newDeckPos] = state->deck[player][card];
       20:  219:		newDeckPos++;
       70:  220:		for (i = card; i < state->deckCount[player] - 1; i++) {
       50:  221:			state->deck[player][i] = state->deck[player][i + 1];
        -:  222:		}
       20:  223:		state->deckCount[player]--;
        -:  224:	}
       22:  225:	for (i = 0; i < newDeckPos; i++) {
       20:  226:		state->deck[player][i] = newDeck[i];
       20:  227:		state->deckCount[player]++;
        -:  228:	}
        -:  229:
        2:  230:	return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:								//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if (state->numActions < 1)
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if (card < adventurer || card > treasure_map)
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:	int who;
        -:  276:	if (DEBUG) {
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1) {
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
        -:  288:	}
    #####:  289:	else if (supplyCount(supplyPos, state) <1) {
        -:  290:		if (DEBUG)
        -:  291:			printf("There are not any of that type of card left\n");
    #####:  292:		return -1;
        -:  293:	}
    #####:  294:	else if (state->coins < getCost(supplyPos)) {
        -:  295:		if (DEBUG)
        -:  296:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:		return -1;
        -:  298:	}
        -:  299:	else {
    #####:  300:		state->phase = 1;
        -:  301:		//state->supplyCount[supplyPos]--;
    #####:  302:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:		state->numBuys--;
        -:  306:		if (DEBUG)
        -:  307:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:	}
        -:  309:
        -:  310:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:	//state->discardCount[who]++;
        -:  312:
    #####:  313:	return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:	return state->handCount[whoseTurn(state)];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:	int currentPlayer = whoseTurn(state);
    #####:  322:	return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:	return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:	int i;
    #####:  331:	int count = 0;
        -:  332:
    #####:  333:	for (i = 0; i < state->deckCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->deck[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->handCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->hand[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	for (i = 0; i < state->discardCount[player]; i++)
        -:  344:	{
    #####:  345:		if (state->discard[player][i] == card) count++;
        -:  346:	}
        -:  347:
    #####:  348:	return count;
        -:  349:}
        -:  350:
        1:  351:int whoseTurn(struct gameState *state) {
        1:  352:	return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:	int k;
        -:  357:	int i;
    #####:  358:	int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:	//Discard hand
    #####:  361:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  362:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:	}
    #####:  365:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:										//Code for determining the player
    #####:  368:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  369:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:	}
        -:  371:	else {
    #####:  372:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:	}
        -:  374:
    #####:  375:	state->outpostPlayed = 0;
    #####:  376:	state->phase = 0;
    #####:  377:	state->numActions = 1;
    #####:  378:	state->coins = 0;
    #####:  379:	state->numBuys = 1;
    #####:  380:	state->playedCardCount = 0;
    #####:  381:	state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:	//int k; move to top
        -:  384:	//Next player draws hand
    #####:  385:	for (k = 0; k < 5; k++) {
    #####:  386:		drawCard(state->whoseTurn, state);//Draw a card
        -:  387:	}
        -:  388:
        -:  389:	//Update money
    #####:  390:	updateCoins(state->whoseTurn, state, 0);
        -:  391:
    #####:  392:	return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:	int i;
        -:  397:	int j;
        -:  398:
        -:  399:	//if stack of Province cards is empty, the game ends
    #####:  400:	if (state->supplyCount[province] == 0)
        -:  401:	{
    #####:  402:		return 1;
        -:  403:	}
        -:  404:
        -:  405:	//if three supply pile are at 0, the game ends
    #####:  406:	j = 0;
    #####:  407:	for (i = 0; i < 25; i++)
        -:  408:	{
    #####:  409:		if (state->supplyCount[i] == 0)
        -:  410:		{
    #####:  411:			j++;
        -:  412:		}
        -:  413:	}
    #####:  414:	if (j >= 3)
        -:  415:	{
    #####:  416:		return 1;
        -:  417:	}
        -:  418:
    #####:  419:	return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor(int player, struct gameState *state) {
        -:  423:
        -:  424:	int i;
    #####:  425:	int score = 0;
        -:  426:	//score from hand
    #####:  427:	for (i = 0; i < state->handCount[player]; i++)
        -:  428:	{
    #####:  429:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  435:	}
        -:  436:
        -:  437:	//score from discard
    #####:  438:	for (i = 0; i < state->discardCount[player]; i++)
        -:  439:	{
    #####:  440:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  446:	}
        -:  447:
        -:  448:	//score from deck
    #####:  449:	for (i = 0; i < state->discardCount[player]; i++)
        -:  450:	{
    #####:  451:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  457:	}
        -:  458:
    #####:  459:	return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:	int i;
        -:  464:	int j;
        -:  465:	int highScore;
        -:  466:	int currentPlayer;
        -:  467:
        -:  468:	//get score for each player
    #####:  469:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:	{
        -:  471:		//set unused player scores to -9999
    #####:  472:		if (i >= state->numPlayers)
        -:  473:		{
    #####:  474:			players[i] = -9999;
        -:  475:		}
        -:  476:		else
        -:  477:		{
    #####:  478:			players[i] = scoreFor(i, state);
        -:  479:		}
        -:  480:	}
        -:  481:
        -:  482:	//find highest score
    #####:  483:	j = 0;
    #####:  484:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:	{
    #####:  486:		if (players[i] > players[j])
        -:  487:		{
    #####:  488:			j = i;
        -:  489:		}
        -:  490:	}
    #####:  491:	highScore = players[j];
        -:  492:
        -:  493:	//add 1 to players who had less turns
    #####:  494:	currentPlayer = whoseTurn(state);
    #####:  495:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:	{
    #####:  497:		if (players[i] == highScore && i > currentPlayer)
        -:  498:		{
    #####:  499:			players[i]++;
        -:  500:		}
        -:  501:	}
        -:  502:
        -:  503:	//find new highest score
    #####:  504:	j = 0;
    #####:  505:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:	{
    #####:  507:		if (players[i] > players[j])
        -:  508:		{
    #####:  509:			j = i;
        -:  510:		}
        -:  511:	}
    #####:  512:	highScore = players[j];
        -:  513:
        -:  514:	//set winners in array to 1 and rest to 0
    #####:  515:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:	{
    #####:  517:		if (players[i] == highScore)
        -:  518:		{
    #####:  519:			players[i] = 1;
        -:  520:		}
        -:  521:		else
        -:  522:		{
    #####:  523:			players[i] = 0;
        -:  524:		}
        -:  525:	}
        -:  526:
    #####:  527:	return 0;
        -:  528:}
        -:  529:
        7:  530:int drawCard(int player, struct gameState *state)
        -:  531:{
        -:  532:	int count;
        -:  533:	int deckCounter;
        7:  534:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  535:
        -:  536:										//Step 1 Shuffle the discard pile back into a deck
        -:  537:		int i;
        -:  538:		//Move discard to deck
    #####:  539:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  540:			state->deck[player][i] = state->discard[player][i];
    #####:  541:			state->discard[player][i] = -1;
        -:  542:		}
        -:  543:
    #####:  544:		state->deckCount[player] = state->discardCount[player];
    #####:  545:		state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:										//Shufffle the deck
    #####:  548:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:
        -:  550:		if (DEBUG) {//Debug statements
        -:  551:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:		}
        -:  553:
    #####:  554:		state->discardCount[player] = 0;
        -:  555:
        -:  556:		//Step 2 Draw Card
    #####:  557:		count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:		if (DEBUG) {//Debug statements
        -:  560:			printf("Current hand count: %d\n", count);
        -:  561:		}
        -:  562:
    #####:  563:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:		if (deckCounter == 0)
    #####:  566:			return -1;
        -:  567:
    #####:  568:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:		state->deckCount[player]--;
    #####:  570:		state->handCount[player]++;//Increment hand count
        -:  571:	}
        -:  572:
        -:  573:	else {
        7:  574:		int count = state->handCount[player];//Get current hand count for player
        -:  575:		int deckCounter;
        -:  576:		if (DEBUG) {//Debug statements
        -:  577:			printf("Current hand count: %d\n", count);
        -:  578:		}
        -:  579:
        7:  580:		deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  581:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  582:		state->deckCount[player]--;
        7:  583:		state->handCount[player]++;//Increment hand count
        -:  584:	}
        -:  585:
        7:  586:	return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:	switch (cardNumber)
        -:  592:	{
        -:  593:	case curse:
    #####:  594:		return 0;
        -:  595:	case estate:
    #####:  596:		return 2;
        -:  597:	case duchy:
    #####:  598:		return 5;
        -:  599:	case province:
    #####:  600:		return 8;
        -:  601:	case copper:
    #####:  602:		return 0;
        -:  603:	case silver:
    #####:  604:		return 3;
        -:  605:	case gold:
    #####:  606:		return 6;
        -:  607:	case adventurer:
    #####:  608:		return 6;
        -:  609:	case council_room:
    #####:  610:		return 5;
        -:  611:	case feast:
    #####:  612:		return 4;
        -:  613:	case gardens:
    #####:  614:		return 4;
        -:  615:	case mine:
    #####:  616:		return 5;
        -:  617:	case remodel:
    #####:  618:		return 4;
        -:  619:	case smithy:
    #####:  620:		return 4;
        -:  621:	case village:
    #####:  622:		return 3;
        -:  623:	case baron:
    #####:  624:		return 4;
        -:  625:	case great_hall:
    #####:  626:		return 3;
        -:  627:	case minion:
    #####:  628:		return 5;
        -:  629:	case steward:
    #####:  630:		return 3;
        -:  631:	case tribute:
    #####:  632:		return 5;
        -:  633:	case ambassador:
    #####:  634:		return 3;
        -:  635:	case cutpurse:
    #####:  636:		return 4;
        -:  637:	case embargo:
    #####:  638:		return 2;
        -:  639:	case outpost:
    #####:  640:		return 5;
        -:  641:	case salvager:
    #####:  642:		return 4;
        -:  643:	case sea_hag:
    #####:  644:		return 4;
        -:  645:	case treasure_map:
    #####:  646:		return 4;
        -:  647:	}
        -:  648:
    #####:  649:	return -1;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:/**********************************************
        -:  654:* THIS IS THE SECTION WE MUST MODIFY FOR HW 2
        -:  655:*
        -:  656:* TODO: REMOVE SWITCH STATEMENT AND CHANGE IT
        -:  657:* SO THAT EACH CARD HAS IT'S OWN FUNCTION
        -:  658:*********************************************/
        -:  659:
        -:  660:/**********************************************
        -:  661:* MANDATORY CARDS TO DO
        -:  662:**********************************************/
        -:  663:
        -:  664:/**********************************************
        -:  665:* ADVENTURER CARD:
        -:  666:* Description:Reveal the top 4 cards of your
        -:  667:* deck. Put the revealed Coppers and Potions
        -:  668:* into your hand. Put the other cards back on
        -:  669:* top in any order.
        -:  670:* Parameters:
        -:  671:* 	- State (Reference to)
        -:  672:* 	- currentPlayer
        -:  673:* 	- tempHand
        -:  674:* 	- z (value)
        -:  675:*********************************************/
    #####:  676:void adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int z) {
        -:  677:	// Variables needed in this call again:
        -:  678:	int cardDrawn; 			// Moved into function to simplify without a need for allocating memory
    #####:  679:	int drawntreasure = 0;	// Also moved into function to simplify allocation.
        -:  680:
    #####:  681:	while (drawntreasure<2) { // ***INCREASED IT BY ONE TO CREATE AN ERROR****
    #####:  682:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:			shuffle(currentPlayer, state);
        -:  684:		}
    #####:  685:		drawCard(currentPlayer, state);
    #####:  686:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  687:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:			drawntreasure++;
        -:  689:		else {
    #####:  690:			temphand[z] = cardDrawn;
    #####:  691:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:			z++;
        -:  693:		}
        -:  694:	}
    #####:  695:	while (z - 1 >= 0) {
    #####:  696:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  697:		z = z - 1;
        -:  698:	}
        -:  699:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  700:}
        -:  701:
        -:  702:/**********************************************
        -:  703:* SMITHY CARD:
        -:  704:* Description: +3 Cards
        -:  705:* Parameters:
        -:  706:* 	- State
        -:  707:* 	- currentPlayer
        -:  708:* 	- handPos
        -:  709:*********************************************/
    #####:  710:void smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  711:	//+3 Cards
        -:  712:	int i;
    #####:  713:	for (i = 0; i < 4; i++) { // *** ERROR: MODIFIED SO IT ACTUALLY DRAWS 4 RATHER THAN 3 ***
    #####:  714:		drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:
        -:  717:	//discard card from hand
    #####:  718:	discardCard(handPos, currentPlayer, state, 0);
        -:  719:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        -:  720:
    #####:  721:}
        -:  722:
        -:  723:/*********************************************
        -:  724:* PERSONAL CHOICE OF CARDS (3)
        -:  725:********************************************/
        -:  726:
        -:  727:/**********************************************
        -:  728:* VILLAGE CARD:
        -:  729:* Description: +1 Cards, +2 Actions
        -:  730:* Parameters:
        -:  731:* 	- State
        -:  732:* 	- currentPlayer
        -:  733:* 	- handPos
        -:  734:*********************************************/
    #####:  735:void villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  736:	//+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	//+2 Actions
    #####:  740:	state->numActions = state->numActions + 3; // ** ERROR: MADE IT ADD 3 ACTIONS RATHER THAN 2 **
        -:  741:
        -:  742:											   //discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
        -:  744:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  745:}
        -:  746:
        -:  747:/**********************************************
        -:  748:* GREAT HALL CARD:
        -:  749:* Description: +1 Cards, +1 Actions
        -:  750:* Parameters:
        -:  751:* 	- State
        -:  752:* 	- currentPlayer
        -:  753:* 	- handPos
        -:  754:*********************************************/
        1:  755:void greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  756:	//+1 Card
        1:  757:	drawCard(currentPlayer, state);
        1:  758:	drawCard(currentPlayer, state);  // ** ERROR: Drawing 2 cards rather than 1 **
        -:  759:
        -:  760:
        -:  761:									 //+1 Actions
        1:  762:	state->numActions++;
        -:  763:
        -:  764:	//discard card from hand
        1:  765:	discardCard(handPos, currentPlayer, state, 0);
        -:  766:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
        1:  767:}
        -:  768:/**********************************************
        -:  769:* COUNCIL ROOM CARD:
        -:  770:* Description: +4 Cards, +1 Buys, Rest of
        -:  771:* Players also draw cards
        -:  772:* Parameters:
        -:  773:* 	- State
        -:  774:* 	- currentPlayer
        -:  775:* 	- handPos
        -:  776:*
        -:  777:*********************************************/
    #####:  778:void councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -:  779:	int i;
        -:  780:	//+4 Cards
    #####:  781:	for (i = 0; i < 3; i++) // ** ERROR: ONLY DRAWS 3 CARDS RATHER THAN 4 **
        -:  782:	{
    #####:  783:		drawCard(currentPlayer, state);
        -:  784:	}
        -:  785:
        -:  786:	//+1 Buy
    #####:  787:	state->numBuys++;
        -:  788:
        -:  789:	//Each other player draws a card
    #####:  790:	for (i = 0; i < state->numPlayers; i++)
        -:  791:	{
    #####:  792:		if (i != currentPlayer)
        -:  793:		{
    #####:  794:			drawCard(i, state);
        -:  795:		}
        -:  796:	}
        -:  797:
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:	// return 0; <- This should no longer be necessary as we are doing a void function now rather than a switch
    #####:  802:}
        -:  803:
        -:  804:
        -:  805:
        1:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        -:  812:	int index;
        1:  813:	int currentPlayer = whoseTurn(state);
        1:  814:	int nextPlayer = currentPlayer + 1;
        -:  815:
        1:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:	int temphand[MAX_HAND];// moved above the if statement
        -:  818:						   // int drawntreasure=0;
        -:  819:						   // int cardDrawn;
        1:  820:	int z = 0;// this is the counter for the temp hand
        1:  821:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  822:		nextPlayer = 0;
        -:  823:	}
        -:  824:
        -:  825:
        -:  826:	//uses switch to select card and perform actions
        1:  827:	switch (card)
        -:  828:	{
        -:  829:		/*****************************
        -:  830:		* MODIFIED THIS CARD
        -:  831:		*****************************/
        -:  832:	case adventurer:
    #####:  833:		adventurerCard(state, currentPlayer, temphand, z);
    #####:  834:		return 0;
        -:  835:		/*while(drawntreasure<2){
        -:  836:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  837:		shuffle(currentPlayer, state);
        -:  838:		}
        -:  839:		drawCard(currentPlayer, state);
        -:  840:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  841:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  842:		drawntreasure++;
        -:  843:		else{
        -:  844:		temphand[z]=cardDrawn;
        -:  845:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  846:		z++;
        -:  847:		}
        -:  848:		}
        -:  849:		while(z-1>=0){
        -:  850:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  851:		z=z-1;
        -:  852:		}
        -:  853:		return 0;*/
        -:  854:		/*****************************
        -:  855:		* MODIFIED THIS CARD
        -:  856:		*****************************/
        -:  857:	case council_room:
    #####:  858:		councilRoomCard(state, currentPlayer, handPos);
    #####:  859:		return 0;
        -:  860:		/* //+4 Cards
        -:  861:		for (i = 0; i < 4; i++)
        -:  862:		{
        -:  863:		drawCard(currentPlayer, state);
        -:  864:		}
        -:  865:		//+1 Buy
        -:  866:		state->numBuys++;
        -:  867:		//Each other player draws a card
        -:  868:		for (i = 0; i < state->numPlayers; i++)
        -:  869:		{
        -:  870:		if ( i != currentPlayer )
        -:  871:		{
        -:  872:		drawCard(i, state);
        -:  873:		}
        -:  874:		}
        -:  875:		//put played card in played card pile
        -:  876:		discardCard(handPos, currentPlayer, state, 0);
        -:  877:		return 0;*/
        -:  878:
        -:  879:	case feast:
        -:  880:		//gain card with cost up to 5
        -:  881:		//Backup hand
    #####:  882:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  883:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:		}
        -:  886:		//Backup hand
        -:  887:
        -:  888:		//Update Coins for Buy
    #####:  889:		updateCoins(currentPlayer, state, 5);
    #####:  890:		x = 1;//Condition to loop on
    #####:  891:		while (x == 1) {//Buy one card
    #####:  892:			if (supplyCount(choice1, state) <= 0) {
        -:  893:				if (DEBUG)
        -:  894:					printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:				if (DEBUG) {
        -:  897:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:				}
        -:  899:			}
    #####:  900:			else if (state->coins < getCost(choice1)) {
    #####:  901:				printf("That card is too expensive!\n");
        -:  902:
        -:  903:				if (DEBUG) {
        -:  904:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:				}
        -:  906:			}
        -:  907:			else {
        -:  908:
        -:  909:				if (DEBUG) {
        -:  910:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:				}
        -:  912:
    #####:  913:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:				x = 0;//No more buying cards
        -:  915:
        -:  916:				if (DEBUG) {
        -:  917:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:				}
        -:  919:
        -:  920:			}
        -:  921:		}
        -:  922:
        -:  923:		//Reset Hand
    #####:  924:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  925:			state->hand[currentPlayer][i] = temphand[i];
    #####:  926:			temphand[i] = -1;
        -:  927:		}
        -:  928:		//Reset Hand
        -:  929:
    #####:  930:		return 0;
        -:  931:
        -:  932:	case gardens:
    #####:  933:		return -1;
        -:  934:
        -:  935:	case mine:
    #####:  936:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:		{
    #####:  940:			return -1;
        -:  941:		}
        -:  942:
    #####:  943:		if (choice2 > treasure_map || choice2 < curse)
        -:  944:		{
    #####:  945:			return -1;
        -:  946:		}
        -:  947:
    #####:  948:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
    #####:  968:		return 0;
        -:  969:
        -:  970:	case remodel:
    #####:  971:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  974:		{
    #####:  975:			return -1;
        -:  976:		}
        -:  977:
    #####:  978:		gainCard(choice2, state, 0, currentPlayer);
        -:  979:
        -:  980:		//discard card from hand
    #####:  981:		discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:		//discard trashed card
    #####:  984:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:		{
    #####:  986:			if (state->hand[currentPlayer][i] == j)
        -:  987:			{
    #####:  988:				discardCard(i, currentPlayer, state, 0);
    #####:  989:				break;
        -:  990:			}
        -:  991:		}
        -:  992:
        -:  993:
    #####:  994:		return 0;
        -:  995:		/*****************************
        -:  996:		* MODIFIED THIS CARD
        -:  997:		*****************************/
        -:  998:	case smithy:
    #####:  999:		smithyCard(state, currentPlayer, handPos);
    #####: 1000:		return 0;
        -: 1001:		/*//+3 Cards
        -: 1002:		for (i = 0; i < 3; i++)
        -: 1003:		{
        -: 1004:		drawCard(currentPlayer, state);
        -: 1005:		}
        -: 1006:		//discard card from hand
        -: 1007:		discardCard(handPos, currentPlayer, state, 0);
        -: 1008:		return 0;*/
        -: 1009:
        -: 1010:		/*****************************
        -: 1011:		* MODIFIED THIS CARD
        -: 1012:		*****************************/
        -: 1013:	case village:
    #####: 1014:		villageCard(state, currentPlayer, handPos);
    #####: 1015:		return 0;
        -: 1016:		/*//+1 Card
        -: 1017:		drawCard(currentPlayer, state);
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:		//discard played card from hand
        -: 1021:		discardCard(handPos, currentPlayer, state, 0);
        -: 1022:		return 0;*/
        -: 1023:
        -: 1024:	case baron:
    #####: 1025:		state->numBuys++;//Increase buys by 1!
    #####: 1026:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####: 1027:			int p = 0;//Iterator for hand!
    #####: 1028:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1029:			while (card_not_discarded) {
    #####: 1030:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####: 1031:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1032:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1033:					state->discardCount[currentPlayer]++;
    #####: 1034:					for (; p < state->handCount[currentPlayer]; p++) {
    #####: 1035:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1036:					}
    #####: 1037:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:					state->handCount[currentPlayer]--;
    #####: 1039:					card_not_discarded = 0;//Exit the loop
        -: 1040:				}
    #####: 1041:				else if (p > state->handCount[currentPlayer]) {
        -: 1042:					if (DEBUG) {
        -: 1043:						printf("No estate cards in your hand, invalid choice\n");
        -: 1044:						printf("Must gain an estate if there are any\n");
        -: 1045:					}
    #####: 1046:					if (supplyCount(estate, state) > 0) {
    #####: 1047:						gainCard(estate, state, 0, currentPlayer);
    #####: 1048:						state->supplyCount[estate]--;//Decrement estates
    #####: 1049:						if (supplyCount(estate, state) == 0) {
    #####: 1050:							isGameOver(state);
        -: 1051:						}
        -: 1052:					}
    #####: 1053:					card_not_discarded = 0;//Exit the loop
        -: 1054:				}
        -: 1055:
        -: 1056:				else {
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}
        -: 1061:
        -: 1062:		else {
    #####: 1063:			if (supplyCount(estate, state) > 0) {
    #####: 1064:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1065:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1066:				if (supplyCount(estate, state) == 0) {
    #####: 1067:					isGameOver(state);
        -: 1068:				}
        -: 1069:			}
        -: 1070:		}
        -: 1071:
        -: 1072:
    #####: 1073:		return 0;
        -: 1074:
        -: 1075:		/*****************************
        -: 1076:		* MODIFIED THIS CARD
        -: 1077:		*****************************/
        -: 1078:	case great_hall:
        1: 1079:		greatHallCard(state, currentPlayer, handPos);
        1: 1080:		return 0;
        -: 1081:		/*//+1 Card
        -: 1082:		drawCard(currentPlayer, state);
        -: 1083:		//+1 Actions
        -: 1084:		state->numActions++;
        -: 1085:		//discard card from hand
        -: 1086:		discardCard(handPos, currentPlayer, state, 0);
        -: 1087:		return 0;*/
        -: 1088:
        -: 1089:	case minion:
        -: 1090:		//+1 action
    #####: 1091:		state->numActions++;
        -: 1092:
        -: 1093:		//discard card from hand
    #####: 1094:		discardCard(handPos, currentPlayer, state, 0);
        -: 1095:
    #####: 1096:		if (choice1)		//+2 coins
        -: 1097:		{
    #####: 1098:			state->coins = state->coins + 2;
        -: 1099:		}
        -: 1100:
    #####: 1101:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1102:		{
        -: 1103:			//discard hand
    #####: 1104:			while (numHandCards(state) > 0)
        -: 1105:			{
    #####: 1106:				discardCard(handPos, currentPlayer, state, 0);
        -: 1107:			}
        -: 1108:
        -: 1109:			//draw 4
    #####: 1110:			for (i = 0; i < 4; i++)
        -: 1111:			{
    #####: 1112:				drawCard(currentPlayer, state);
        -: 1113:			}
        -: 1114:
        -: 1115:			//other players discard hand and redraw if hand size > 4
    #####: 1116:			for (i = 0; i < state->numPlayers; i++)
        -: 1117:			{
    #####: 1118:				if (i != currentPlayer)
        -: 1119:				{
    #####: 1120:					if (state->handCount[i] > 4)
        -: 1121:					{
        -: 1122:						//discard hand
    #####: 1123:						while (state->handCount[i] > 0)
        -: 1124:						{
    #####: 1125:							discardCard(handPos, i, state, 0);
        -: 1126:						}
        -: 1127:
        -: 1128:						//draw 4
    #####: 1129:						for (j = 0; j < 4; j++)
        -: 1130:						{
    #####: 1131:							drawCard(i, state);
        -: 1132:						}
        -: 1133:					}
        -: 1134:				}
        -: 1135:			}
        -: 1136:
        -: 1137:		}
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case steward:
    #####: 1141:		if (choice1 == 1)
        -: 1142:		{
        -: 1143:			//+2 cards
    #####: 1144:			drawCard(currentPlayer, state);
    #####: 1145:			drawCard(currentPlayer, state);
        -: 1146:		}
    #####: 1147:		else if (choice1 == 2)
        -: 1148:		{
        -: 1149:			//+2 coins
    #####: 1150:			state->coins = state->coins + 2;
        -: 1151:		}
        -: 1152:		else
        -: 1153:		{
        -: 1154:			//trash 2 cards in hand
    #####: 1155:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:			discardCard(choice3, currentPlayer, state, 1);
        -: 1157:		}
        -: 1158:
        -: 1159:		//discard card from hand
    #####: 1160:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:		return 0;
        -: 1162:
        -: 1163:	case tribute:
    #####: 1164:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1165:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1166:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:				state->deckCount[nextPlayer]--;
        -: 1168:			}
    #####: 1169:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1170:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1171:				state->discardCount[nextPlayer]--;
        -: 1172:			}
        -: 1173:			else {
        -: 1174:				//No Card to Reveal
        -: 1175:				if (DEBUG) {
        -: 1176:					printf("No cards to reveal\n");
        -: 1177:				}
        -: 1178:			}
        -: 1179:		}
        -: 1180:
        -: 1181:		else {
    #####: 1182:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1183:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1184:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:					state->deckCount[nextPlayer]++;
    #####: 1186:					state->discard[nextPlayer][i] = -1;
    #####: 1187:					state->discardCount[nextPlayer]--;
        -: 1188:				}
        -: 1189:
    #####: 1190:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1191:			}
    #####: 1192:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1193:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:			state->deckCount[nextPlayer]--;
    #####: 1195:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1196:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:			state->deckCount[nextPlayer]--;
        -: 1198:		}
        -: 1199:
    #####: 1200:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1201:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:			state->playedCardCount++;
    #####: 1203:			tributeRevealedCards[1] = -1;
        -: 1204:		}
        -: 1205:
    #####: 1206:		for (i = 0; i <= 2; i++) {
    #####: 1207:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1208:				state->coins += 2;
        -: 1209:			}
        -: 1210:
    #####: 1211:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1212:				drawCard(currentPlayer, state);
    #####: 1213:				drawCard(currentPlayer, state);
        -: 1214:			}
        -: 1215:			else {//Action Card
    #####: 1216:				state->numActions = state->numActions + 2;
        -: 1217:			}
        -: 1218:		}
        -: 1219:
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case ambassador:
    #####: 1223:		j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:		if (choice2 > 2 || choice2 < 0)
        -: 1226:		{
    #####: 1227:			return -1;
        -: 1228:		}
        -: 1229:
    #####: 1230:		if (choice1 == handPos)
        -: 1231:		{
    #####: 1232:			return -1;
        -: 1233:		}
        -: 1234:
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1238:			{
    #####: 1239:				j++;
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		if (j < choice2)
        -: 1243:		{
    #####: 1244:			return -1;
        -: 1245:		}
        -: 1246:
        -: 1247:		if (DEBUG)
        -: 1248:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:		//increase supply count for choosen card by amount being discarded
    #####: 1251:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:
        -: 1253:		//each other player gains a copy of revealed card
    #####: 1254:		for (i = 0; i < state->numPlayers; i++)
        -: 1255:		{
    #####: 1256:			if (i != currentPlayer)
        -: 1257:			{
    #####: 1258:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1259:			}
        -: 1260:		}
        -: 1261:
        -: 1262:		//discard played card from hand
    #####: 1263:		discardCard(handPos, currentPlayer, state, 0);
        -: 1264:
        -: 1265:		//trash copies of cards returned to supply
    #####: 1266:		for (j = 0; j < choice2; j++)
        -: 1267:		{
    #####: 1268:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:			{
    #####: 1270:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1271:				{
    #####: 1272:					discardCard(i, currentPlayer, state, 1);
    #####: 1273:					break;
        -: 1274:				}
        -: 1275:			}
        -: 1276:		}
        -: 1277:
    #####: 1278:		return 0;
        -: 1279:
        -: 1280:	case cutpurse:
        -: 1281:
    #####: 1282:		updateCoins(currentPlayer, state, 2);
    #####: 1283:		for (i = 0; i < state->numPlayers; i++)
        -: 1284:		{
    #####: 1285:			if (i != currentPlayer)
        -: 1286:			{
    #####: 1287:				for (j = 0; j < state->handCount[i]; j++)
        -: 1288:				{
    #####: 1289:					if (state->hand[i][j] == copper)
        -: 1290:					{
    #####: 1291:						discardCard(j, i, state, 0);
    #####: 1292:						break;
        -: 1293:					}
    #####: 1294:					if (j == state->handCount[i])
        -: 1295:					{
    #####: 1296:						for (k = 0; k < state->handCount[i]; k++)
        -: 1297:						{
        -: 1298:							if (DEBUG)
        -: 1299:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:						}
    #####: 1301:						break;
        -: 1302:					}
        -: 1303:				}
        -: 1304:
        -: 1305:			}
        -: 1306:
        -: 1307:		}
        -: 1308:
        -: 1309:		//discard played card from hand
    #####: 1310:		discardCard(handPos, currentPlayer, state, 0);
        -: 1311:
    #####: 1312:		return 0;
        -: 1313:
        -: 1314:
        -: 1315:	case embargo:
        -: 1316:		//+2 Coins
    #####: 1317:		state->coins = state->coins + 2;
        -: 1318:
        -: 1319:		//see if selected pile is in play
    #####: 1320:		if (state->supplyCount[choice1] == -1)
        -: 1321:		{
    #####: 1322:			return -1;
        -: 1323:		}
        -: 1324:
        -: 1325:		//add embargo token to selected supply pile
    #####: 1326:		state->embargoTokens[choice1]++;
        -: 1327:
        -: 1328:		//trash card
    #####: 1329:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1330:		return 0;
        -: 1331:
        -: 1332:	case outpost:
        -: 1333:		//set outpost flag
    #####: 1334:		state->outpostPlayed++;
        -: 1335:
        -: 1336:		//discard card
    #####: 1337:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:		return 0;
        -: 1339:
        -: 1340:	case salvager:
        -: 1341:		//+1 buy
    #####: 1342:		state->numBuys++;
        -: 1343:
    #####: 1344:		if (choice1)
        -: 1345:		{
        -: 1346:			//gain coins equal to trashed card
    #####: 1347:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1348:			//trash card
    #####: 1349:			discardCard(choice1, currentPlayer, state, 1);
        -: 1350:		}
        -: 1351:
        -: 1352:		//discard card
    #####: 1353:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:		return 0;
        -: 1355:
        -: 1356:	case sea_hag:
    #####: 1357:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1358:			if (i != currentPlayer) {
    #####: 1359:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:				state->discardCount[i]++;
    #####: 1361:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:			}
        -: 1363:		}
    #####: 1364:		return 0;
        -: 1365:
        -: 1366:	case treasure_map:
        -: 1367:		//search hand for another treasure_map
    #####: 1368:		index = -1;
    #####: 1369:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1370:		{
    #####: 1371:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1372:			{
    #####: 1373:				index = i;
    #####: 1374:				break;
        -: 1375:			}
        -: 1376:		}
    #####: 1377:		if (index > -1)
        -: 1378:		{
        -: 1379:			//trash both treasure cards
    #####: 1380:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1381:			discardCard(index, currentPlayer, state, 1);
        -: 1382:
        -: 1383:			//gain 4 Gold cards
    #####: 1384:			for (i = 0; i < 4; i++)
        -: 1385:			{
    #####: 1386:				gainCard(gold, state, 1, currentPlayer);
        -: 1387:			}
        -: 1388:
        -: 1389:			//return success
    #####: 1390:			return 1;
        -: 1391:		}
        -: 1392:
        -: 1393:		//no second treasure_map found in hand
    #####: 1394:		return -1;
        -: 1395:	}
        -: 1396:
    #####: 1397:	return -1;
        -: 1398:}
        -: 1399:
        1: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:
        -: 1403:	//if card is not trashed, added to Played pile
        1: 1404:	if (trashFlag < 1)
        -: 1405:	{
        -: 1406:		//add card to played pile
        1: 1407:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1408:		state->playedCardCount++;
        -: 1409:	}
        -: 1410:
        -: 1411:	//set played card to -1
        1: 1412:	state->hand[currentPlayer][handPos] = -1;
        -: 1413:
        -: 1414:	//remove card from player's hand
        1: 1415:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1416:	{
        -: 1417:		//reduce number of cards in hand
    #####: 1418:		state->handCount[currentPlayer]--;
        -: 1419:	}
        1: 1420:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1421:	{
        -: 1422:		//reduce number of cards in hand
    #####: 1423:		state->handCount[currentPlayer]--;
        -: 1424:	}
        -: 1425:	else
        -: 1426:	{
        -: 1427:		//replace discarded card with last card in hand
        1: 1428:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1429:		//set last card to -1
        1: 1430:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:		//reduce number of cards in hand
        1: 1432:		state->handCount[currentPlayer]--;
        -: 1433:	}
        -: 1434:
        1: 1435:	return 0;
        -: 1436:}
        -: 1437:
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:	//Note: supplyPos is enum of choosen card
        -: 1441:
        -: 1442:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:	if (supplyCount(supplyPos, state) < 1)
        -: 1444:	{
    #####: 1445:		return -1;
        -: 1446:	}
        -: 1447:
        -: 1448:	//added card for [whoseTurn] current player:
        -: 1449:	// toFlag = 0 : add to discard
        -: 1450:	// toFlag = 1 : add to deck
        -: 1451:	// toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:	if (toFlag == 1)
        -: 1454:	{
    #####: 1455:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1456:		state->deckCount[player]++;
        -: 1457:	}
    #####: 1458:	else if (toFlag == 2)
        -: 1459:	{
    #####: 1460:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1461:		state->handCount[player]++;
        -: 1462:	}
        -: 1463:	else
        -: 1464:	{
    #####: 1465:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1466:		state->discardCount[player]++;
        -: 1467:	}
        -: 1468:
        -: 1469:	//decrease number in supply pile
    #####: 1470:	state->supplyCount[supplyPos]--;
        -: 1471:
    #####: 1472:	return 0;
        -: 1473:}
        -: 1474:
        1: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:	int i;
        -: 1478:
        -: 1479:	//reset coin count
        1: 1480:	state->coins = 0;
        -: 1481:
        -: 1482:	//add coins for each Treasure card in player's hand
        6: 1483:	for (i = 0; i < state->handCount[player]; i++)
        -: 1484:	{
        5: 1485:		if (state->hand[player][i] == copper)
        -: 1486:		{
        4: 1487:			state->coins += 1;
        -: 1488:		}
        1: 1489:		else if (state->hand[player][i] == silver)
        -: 1490:		{
    #####: 1491:			state->coins += 2;
        -: 1492:		}
        1: 1493:		else if (state->hand[player][i] == gold)
        -: 1494:		{
    #####: 1495:			state->coins += 3;
        -: 1496:		}
        -: 1497:	}
        -: 1498:
        -: 1499:	//add bonus
        1: 1500:	state->coins += bonus;
        -: 1501:
        1: 1502:	return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
